StdObjSpace
===========

* find a way via hacking or elegance to run CPython's unit tests
  against the StdObjSpace.

* String formatting still needs work (field widths, precision, ...)

* Provide an importer that can import packages. (we have a 
  limited __import__ builtin defined)  <---- done now?

  Consider PEP 302, new import hooks.
  Try to write as much as possible in app-level.
  How would PyPy import CPython extensions?

* (documentation) generate a nice dot-graph from the structure of PyPy

* port pypy's testing framework to std.utest (probably a sprint topic, 
  as some discussion how to do it is required) 

* (documentation) remove/retire all web-pages referencing e.g.
  AnnSpace or other deprecated stuff

* Review, enhance the new mixed-level module mechanism
  (e.g. the module/builtin*.py files comprise the builtin module)
  and try to apply the same technique for the application level 
  type definitions (types.py) 

* review whatever you like 

* clear out and do a clean implementation of multimethod delegation.
  The idea is to give 'kinds' to arguments according to their use,
  e.g. 'numeric argument' or 'object whose identity is preserved'.
  A 'kind' encapsulates a set of delegation functions. Armin has
  already written documentation for the envisioned new multimethod 
  implementation:

  http://codespeak.net/pypy/index.cgi?doc/objspace/multimethod

  (now irrelevant?  not sure...)

Translator
==========

* enhance the translator components to accept more of PyPy ...

Tools
=====

* add web server thread (!) that allows inspection of e.g. app-level
  tracebacks (and stop clogging the user's terminal with them).

* improve traceobjectspace! currently it only catches 
  calls from outside the space into the space but not
  the ones where the space calls operations on itself! 
