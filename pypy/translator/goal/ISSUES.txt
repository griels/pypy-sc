Known RTyper issues
-------------------

Let's list and update here the issues that will show up, or have shown up
already sometime ago, while running translate_pypy::

  * how to implement the three overrides of translator/ann_override.py ?

  * a new snapshot (14956) of the trunk (which is again annotable) has been made

  * current list of RTyper problems:

    TyperError-1: (pypy.objspace.std.listobject:unwrap)
    no list() support for <PyObjRepr * PyObject>
    .. block@73 with 1 exits
    .. v627007 = simple_call((type list), v627002)

    TyperError-2: (pypy.module.__builtin__.importing:try_import_mod)
    don't know about built-in function <function exists at 0x402011ec>
    .. block@-1 with 2 exits(v908659)
    .. v908643 = simple_call((function exists), f_908613)

    TyperError-3: (pypy.module.__builtin__.importing:load_part)
    don't know about built-in function <function isdir at 0x40201224>
    .. block@201 with 2 exits(v853316)
    .. v853285 = simple_call((function isdir), v853248)

    TyperError-4: (pypy.module.sys.vm:getrefcount)
    don't know about built-in function <built-in function getrefcount>
    .. block@-1 with 1 exits
    .. v324725 = simple_call((builtin_function_or_method getrefcount), w_obj_324706)

    TyperError-5: (pypy.objspace.std.fake:fake__new__)
    don't know about built-in function <built-in function apply>
    .. block@145 with 1 exits
    .. v439600 = simple_call((builtin_function_or_method apply), (builtin_function_or_method __new__), v439572, v43
    9573)

    TyperError-6: (pypy.objspace.std.fake:fake__new__)
    don't know about built-in function <built-in function apply>
    .. block@145 with 1 exits
    .. v338257 = simple_call((builtin_function_or_method apply), (builtin_function_or_method __new__), v338229, v33
    8230)

    TyperError-7: (pypy.objspace.std.fake:setfastscope)
    ll_str unsupported for: <PyObjRepr * PyObject>
    .. block@118 with 1 exits
    .. v181912 = mod(('calling %s: %s'), v181901)

    TyperError-8: (pypy.objspace.std.fake:run)
    don't know about built-in function <built-in function apply>
    .. block@62 with 1 exits
    .. v185355 = simple_call((builtin_function_or_method apply), v185337, v185338, v185339)

    TyperError-9: (pypy.objspace.std.floatobject:hash__Float)
    unimplemented operation: 'hash' on <FloatRepr Float>
    .. block@-1 with 1 exits
    .. v374573 = hash(v374562)

    TyperError-10: (pypy.objspace.std.longobject:longval)
    don't know about built-in function <type 'long'>
    .. block@50 with 1 exits
    .. v630648 = simple_call((type long), d_630611)

    TyperError-11: (pypy.objspace.std.objspace:unwrap)
    don't know how to convert from <InstanceRepr for pypy.interpreter.baseobjspace.W_Root> to <PyObjRepr * PyObject
    >
    .. block@-1 EH with 2 exits(v471216)
    .. link from block@-1 EH to codeless block

    TyperError-12: (pypy.objspace.std.objspace:wrap__object)
    don't know how to convert from <ClassRepr for __builtin__.object> to <PyObjRepr * PyObject>
    .. block@-1 with 2 exits(v768205)
    .. link from block@-1 to block@945

    TyperError-13: (pypy.objspace.std.objspace:wrap__object)
    don't know how to convert from <PyObjRepr * PyObject> to <InstanceRepr for pypy.interpreter.error.OperationErro
    r>
    .. block@-1 with 2 exits(v767254)
    .. link from block@-1 to block@-1

    TyperError-14: (pypy.objspace.std.objspace:wrap__object)
    don't know how to convert from <PyObjRepr * PyObject> to <InstanceRepr for pypy.objspace.std.model.W_Object>
    .. block@-1 with 2 exits(v767231)
    .. link from block@-1 to block@-1

    TyperError-15: (pypy.objspace.std.objspace:wrap__object)
    call_specialcase: unknown tag override:wrap_exception_cls
    .. block@886 with 2 exits(v768328)
    .. v768288 = call_specialcase(v768251, x_768230)

    TyperError-16: (pypy.objspace.std.objspace:wrap__object)
    no unichr() support for <PyObjRepr * PyObject>
    .. block@265 with 1 exits
    .. v767616 = simple_call((builtin_function_or_method unichr), v767586)

    TyperError-17: (pypy.objspace.std.objspace:unwrap)
    unimplemented operation: 'mod' on (<StringRepr * GcStruct rpy_string { hash: Signed, chars: Array of Char  }>, 
    <InstanceRepr for pypy.interpreter.baseobjspace.W_Root>)
    .. block@63 with 1 exits
    .. v471239 = mod(('cannot unwrap: %r'), v471233)

    TyperError-18: (pypy.objspace.std.objspace:wrap__object)
    don't know how to convert from <PyObjRepr * PyObject> to <InstanceRepr for pypy.interpreter.baseobjspace.BaseWr
    appable>
    .. block@-1 with 2 exits(v767718)
    .. link from block@-1 to block@-1

    TyperError-19: (pypy.objspace.std.objspace:wrap__object)
    don't know how to convert from <PyObjRepr * PyObject> to <ClassRepr for __builtin__.object>
    .. block@-1 with 2 exits(v768158)
    .. link from block@-1 to block@-1

    TyperError-20: (pypy.objspace.std.objspace:wrap__object)
    call_specialcase: unknown tag override:fake_object
    .. block@945 with 1 exits
    .. v768246 = call_specialcase((function fake_object), v768225, v768226)

    TyperError-21: (pypy.objspace.std.objspace:wrap__object)
    no list() support for <PyObjRepr * PyObject>
    .. block@446 with 1 exits
    .. v767707 = simple_call((type list), x_767610)

    TyperError-22: (pypy.objspace.std.sliceobject:unwrap)
    don't know about built-in function <type 'slice'>
    .. block@-1 with 1 exits
    .. v626191 = simple_call((type slice), v626103, v626139, v626178)

    TyperError-23: (pypy.objspace.std.tupleobject:unwrap)
    don't know about built-in function <type 'tuple'>
    .. block@66 with 1 exits
    .. v626786 = simple_call((type tuple), v626781)

    TyperError-24: (pypy.objspace.std.unicodeobject:unwrap)
    don't know how to convert from <ListRepr * GcStruct list { items: * GcArray of UniChar  }> to <PyObjRepr * PyObject>
    .. block@-1 with 1 exits
    .. v626273 = simple_call((builtin_function_or_method join), v626264)

    TyperError-25: (pypy.objspace.std.unicodeobject:unicode_zfill__Unicode_ANY)
    cannot make repr of <SomeUnicodeCodePoint(): SomePBC(const=None)>
    .. block@185 with 2 exits(v366540)
    .. v366515 = contains(((u'+', u'-')), v366475)

    TyperError-26: (pypy.interpreter.pycompiler:compile)
    call_specialcase: unknown tag override:cpy_stablecompiler
    .. block@156 with 1 exits
    .. v775851 = call_specialcase(v775814, parse_result_775797, filename_775793, mode_775794)


How to work in parallel:
There is an environment variable to be set with your personal random seed.
Seeds taken so far are
Armin: 42, Samuele: 46, Chris: 49, Arre: 97, hpk/rxe: 23
Under Windows, use
SET RTYPERSEED=xx
where xx is your seed. When you run translate_pypy, you will get a message
with your seed, if everything is fine. The purpose of the seed is to
shuffle the annotated blocks, in order to create different errors.

To get the above RTYPER problems, do:: 

    RTYPERORDER=order,SOMEFILE 
    # stopping on the first error
    python translate_pypy.py -no-c -no-o -fork -text  -t-insist

    # seeing things in the graph
    python translate_pypy.py -no-c -no-o 

In the SOMEFILE you put: 
    pypy.rpython.rarithmetic.ovfcheck_float_to_int 
