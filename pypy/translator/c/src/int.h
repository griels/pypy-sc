/************************************************************/
 /***  C header subsection: operations between ints        ***/

/*** unary operations ***/

#define OP_INT_IS_TRUE(x,r,err)   OP_INT_NE(x,0,r,err)

#define OP_INT_INVERT(x,r,err)    r = ~((x))

#define OP_INT_POS(x,r,err)    r = x

#define OP_INT_NEG(x,r,err)    r = -(x)

#define OP_INT_ABS(x,r,err)    r = (x) >= 0 ? x : -(x)
#define OP_UINT_ABS(x,r,err)   r = (x)

/***  binary operations ***/

#define OP_INT_EQ(x,y,r,err)	  r = ((x) == (y))
#define OP_INT_NE(x,y,r,err)	  r = ((x) != (y))
#define OP_INT_LE(x,y,r,err)	  r = ((x) <= (y))
#define OP_INT_GT(x,y,r,err)	  r = ((x) >  (y))
#define OP_INT_LT(x,y,r,err)	  r = ((x) <  (y))
#define OP_INT_GE(x,y,r,err)	  r = ((x) >= (y))

#define OP_INT_CMP(x,y,r,err) \
	r = (((x) > (y)) - ((x) < (y)))

/* addition, subtraction */

#define OP_INT_ADD(x,y,r,err)     r = (x) + (y)

#define OP_INT_SUB(x,y,r,err)     r = (x) - (y)

#define OP_INT_MUL(x,y,r,err)     r = (x) * (y)

/* shifting */

/* NB. shifting has same limitations as C: the shift count must be
       >= 0 and < LONG_BITS. */
#define OP_INT_RSHIFT(x,y,r,err)    r = Py_ARITHMETIC_RIGHT_SHIFT(long, x, y)
#define OP_UINT_RSHIFT(x,y,r,err)   r = (x) >> (y)

#define OP_INT_LSHIFT(x,y,r,err)    r = (x) << (y)
#define OP_UINT_LSHIFT(x,y,r,err)   r = (x) << (y)

/* floor division */

/* NB: OP_INT_FLOORDIV and OP_INT_MOD are the operations that end up in the graphs
       after the raisingop2direct_call transformation has been done. */
#define OP_INT_FLOORDIV(x,y,r,err)    r = (x) / (y)
#define OP_UINT_FLOORDIV(x,y,r,err)   r = (x) / (y)

/* modulus */

#define OP_INT_MOD(x,y,r,err)     r = (x) % (y)
#define OP_UINT_MOD(x,y,r,err)    r = (x) % (y)

/* bit operations */

#define OP_INT_AND(x,y,r,err)     r = (x) & (y)
#define OP_INT_OR( x,y,r,err)     r = (x) | (y)
#define OP_INT_XOR(x,y,r,err)     r = (x) ^ (y)

/*** conversions ***/

#define OP_CAST_BOOL_TO_INT(x,r,err)    r = (long)(x)
#define OP_CAST_BOOL_TO_UINT(x,r,err)   r = (unsigned long)(x)
#define OP_CAST_UINT_TO_INT(x,r,err)    r = (long)(x)
#define OP_CAST_INT_TO_UINT(x,r,err)    r = (unsigned long)(x)
#define OP_CAST_INT_TO_LONGLONG(x,r,err) r = (long long)(x)
#define OP_CAST_CHAR_TO_INT(x,r,err)    r = (long)((unsigned char)(x))
#define OP_CAST_INT_TO_CHAR(x,r,err)    r = (char)(x)
#define OP_CAST_PTR_TO_INT(x,r,err)     r = (long)(x)    /* XXX */

#define OP_TRUNCATE_LONGLONG_TO_INT(x,r,err) r = (long)(x)

#define OP_CAST_UNICHAR_TO_INT(x,r,err)    r = (long)((unsigned long)(x)) /*?*/
#define OP_CAST_INT_TO_UNICHAR(x,r,err)    r = (unsigned int)(x)

/* bool operations */

#define OP_BOOL_NOT(x, r, err) r = !(x)

/* _________________ certain implementations __________________ */

/* no editing below this point */
/* following lines are generated by mkuint.py */

#define OP_UINT_IS_TRUE OP_INT_IS_TRUE
#define OP_UINT_INVERT OP_INT_INVERT
#define OP_UINT_POS OP_INT_POS
#define OP_UINT_NEG OP_INT_NEG
/* skipping OP_UINT_ABS */
#define OP_UINT_EQ OP_INT_EQ
#define OP_UINT_NE OP_INT_NE
#define OP_UINT_LE OP_INT_LE
#define OP_UINT_GT OP_INT_GT
#define OP_UINT_LT OP_INT_LT
#define OP_UINT_GE OP_INT_GE
#define OP_UINT_CMP OP_INT_CMP
#define OP_UINT_ADD OP_INT_ADD
#define OP_UINT_SUB OP_INT_SUB
#define OP_UINT_MUL OP_INT_MUL
/* skipping OP_UINT_RSHIFT */
/* skipping OP_UINT_LSHIFT */
/* skipping OP_UINT_FLOORDIV */
/* skipping OP_UINT_FLOORDIV_ZER */
/* skipping OP_UINT_MOD */
/* skipping OP_UINT_MOD_ZER */
#define OP_UINT_AND OP_INT_AND
#define OP_UINT_OR OP_INT_OR
#define OP_UINT_XOR OP_INT_XOR

#define OP_ULLONG_MUL OP_INT_MUL

#define OP_LLONG_IS_TRUE OP_INT_IS_TRUE
#define OP_LLONG_INVERT OP_INT_INVERT

#define OP_LLONG_POS OP_INT_POS
#define OP_LLONG_NEG OP_INT_NEG

#define OP_LLONG_ADD OP_INT_ADD
#define OP_LLONG_SUB OP_INT_SUB
#define OP_LLONG_MUL OP_INT_MUL
#define OP_LLONG_DIV OP_INT_DIV

#define OP_LLONG_EQ  OP_INT_EQ
#define OP_LLONG_NE  OP_INT_NE
#define OP_LLONG_LT  OP_INT_LT
#define OP_LLONG_LE  OP_INT_LE
#define OP_LLONG_GT  OP_INT_GT
#define OP_LLONG_GE  OP_INT_GE

#define OP_LLONG_CMP OP_INT_CMP

#define OP_LLONG_AND    OP_INT_AND
#define OP_LLONG_OR     OP_INT_OR
#define OP_LLONG_XOR    OP_INT_XOR

#define OP_LLONG_ABS    OP_INT_ABS
#define OP_LLONG_RSHIFT OP_INT_RSHIFT
#define OP_LLONG_LSHIFT OP_INT_LSHIFT
