"""This produces a graph in the style that was manually experimented
with in http://codespeak.net/svn/user/arigo/hack/misc/stackless.c
And is meant to replace stackless support in the PyPy backends.

Stackless transformation workplan.
====================================

Currently genc has stackless support mostly spread over two files. (c/stackless.py & c/src/ll_stackless.h)
In addition some files are generated by genc (in the tmp directory):
    - slp_defs.h (frame structures and prototype of functions for initialization)
    - slp_signatures.h (resume function calls, one per function signature id)
    - slp_state_decoding.h (table for finding resume function (including signature id))
    - slp_imp.c (actual frame initializers)

Objective is to get rid of 'hardcoded; stackless support in genc (c/stackless.py) as well as the handwritten code in c/src/ll_stackless.h

This is done by first creating a transformation (backendopt/stackless.py) that does basically the same as SlpFunctionCodeGenerator in c/stackless.py . The four slp_* files would be stored in graph structures and arrays. This process should leave the old code working and unchanged as much as possible! This step alone would make stackless work in genllvm.

A second step would be to rewrite c/src/ll_stackless.h in RPython. This would allow backendopt transformations to be more effective but yields not additional advantage to PyPy's current backends (genjs has handwritten stackless support) and other backends are probably too experimental at this stage to benefit from stackless support.
"""

from pypy.translator.backendopt.support import log, all_operations, annotate
log = log.stackless

def stackless(translator, stacklessdata):
    log('starting')
    seen = {}
    for op in all_operations(translator):
        try:
            seen[op.opname] += 1
        except:
            seen[op.opname] = 1

    #statistics...
    for k, v in seen.iteritems():
        log("%dx %s" % (v, k))

    log('finished')
