# generated by 'xml2py'
# flags 'llvmcapi.xml -l ../llvmcapi/llvmcapi.so -o llvmcapi.tmp1'
from cc import *
STRING = c_char_p


UShortTyID = 4
FirstDerivedTyID = 13
FunctionTyID = 13
ShortTyID = 5
LabelTyID = 12
UIntTyID = 6
ArrayTyID = 15
IntTyID = 7
PointerTyID = 16
ULongTyID = 8
LongTyID = 9
BoolTyID = 1
StructTyID = 14
PackedTyID = 18
FloatTyID = 10
NumTypeIDs = 19
UByteTyID = 2
VoidTyID = 0
SByteTyID = 3
OpaqueTyID = 17
LastPrimitiveTyID = 12
DoubleTyID = 11

def ExecutionEngine__create__(MP, ForceInterpreter):
    # ../llvmcapi/include/ExecutionEngine/ExecutionEngine.h 12
    return ExecutionEngine__create__._api_(MP, ForceInterpreter)
ExecutionEngine__create__ = cdecl(c_void_p, 'llvmcapi', [c_void_p, c_int]) (ExecutionEngine__create__)


def ExecutionEngine_getModule(EE):
    # ../llvmcapi/include/ExecutionEngine/ExecutionEngine.h 13
    return ExecutionEngine_getModule._api_(EE)
ExecutionEngine_getModule = cdecl(c_void_p, 'llvmcapi', [c_void_p]) (ExecutionEngine_getModule)


def ExecutionEngine_freeMachineCodeForFunction(EE, F):
    # ../llvmcapi/include/ExecutionEngine/ExecutionEngine.h 14
    return ExecutionEngine_freeMachineCodeForFunction._api_(EE, F)
ExecutionEngine_freeMachineCodeForFunction = cdecl(None, 'llvmcapi', [c_void_p, c_void_p]) (ExecutionEngine_freeMachineCodeForFunction)


def ExecutionEngine_runFunction(EE, F, A):
    # ../llvmcapi/include/ExecutionEngine/ExecutionEngine.h 17
    return ExecutionEngine_runFunction._api_(EE, F, A)
ExecutionEngine_runFunction = cdecl(c_longlong, 'llvmcapi', [c_void_p, c_void_p, c_void_p]) (ExecutionEngine_runFunction)

# ../llvmcapi/include/ExecutionEngine/GenericValue.h 20
class GenericValue_(Union):
    pass
# ../llvmcapi/include/ExecutionEngine/GenericValue.h 32
class N13GenericValue_3DOLLAR_0E(Structure):
    pass
N13GenericValue_3DOLLAR_0E._fields_ = [
    # ../llvmcapi/include/ExecutionEngine/GenericValue.h 32
    ('first', c_uint),
    ('second', c_uint),
]
assert sizeof(N13GenericValue_3DOLLAR_0E) == 8, sizeof(N13GenericValue_3DOLLAR_0E)

GenericValue_._fields_ = [
    # ../llvmcapi/include/ExecutionEngine/GenericValue.h 20
    ('BoolVal', c_byte),
    ('UByteVal', c_ubyte),
    ('SByteVal', c_byte),
    ('UShortVal', c_ushort),
    ('ShortVal', c_short),
    ('UIntVal', c_uint),
    ('IntVal', c_int),
    ('ULongVal', c_ulonglong),
    ('LongVal', c_longlong),
    ('DoubleVal', c_double),
    ('FloatVal', c_float),
    ('UIntPairVal', N13GenericValue_3DOLLAR_0E),
    ('PointerVal', c_void_p),
    ('Untyped', c_ubyte * 8),
]
assert sizeof(GenericValue_) == 8, sizeof(GenericValue_)


def GenericValue__init__():
    # ../llvmcapi/include/ExecutionEngine/GenericValue.h 37
    return GenericValue__init__._api_()
GenericValue__init__ = cdecl(c_void_p, 'llvmcapi', []) (GenericValue__init__)


def FunctionType_getNumParams(FT):
    # ../llvmcapi/include/VMCore/DerivedTypes.h 8
    return FunctionType_getNumParams._api_(FT)
FunctionType_getNumParams = cdecl(c_int, 'llvmcapi', [c_void_p]) (FunctionType_getNumParams)


def FunctionType_getParamType(FT, i):
    # ../llvmcapi/include/VMCore/DerivedTypes.h 9
    return FunctionType_getParamType._api_(FT, i)
FunctionType_getParamType = cdecl(c_void_p, 'llvmcapi', [c_void_p, c_int]) (FunctionType_getParamType)


def FunctionType_getReturnType(FT):
    # ../llvmcapi/include/VMCore/DerivedTypes.h 10
    return FunctionType_getReturnType._api_(FT)
FunctionType_getReturnType = cdecl(c_void_p, 'llvmcapi', [c_void_p]) (FunctionType_getReturnType)


def Function_eraseFromParent(F):
    # ../llvmcapi/include/VMCore/Function.h 8
    return Function_eraseFromParent._api_(F)
Function_eraseFromParent = cdecl(None, 'llvmcapi', [c_void_p]) (Function_eraseFromParent)


def Function_getFunctionType(F):
    # ../llvmcapi/include/VMCore/Function.h 9
    return Function_getFunctionType._api_(F)
Function_getFunctionType = cdecl(c_void_p, 'llvmcapi', [c_void_p]) (Function_getFunctionType)


def Module__init__(ModuleID):
    # ../llvmcapi/include/VMCore/Module.h 8
    return Module__init__._api_(ModuleID)
Module__init__ = cdecl(c_void_p, 'llvmcapi', [STRING]) (Module__init__)


def Module_getModuleIdentifier(M):
    # ../llvmcapi/include/VMCore/Module.h 9
    return Module_getModuleIdentifier._api_(M)
Module_getModuleIdentifier = cdecl(STRING, 'llvmcapi', [c_void_p]) (Module_getModuleIdentifier)


def Module_setModuleIdentifier(M, ID):
    # ../llvmcapi/include/VMCore/Module.h 10
    return Module_setModuleIdentifier._api_(M, ID)
Module_setModuleIdentifier = cdecl(None, 'llvmcapi', [c_void_p, STRING]) (Module_setModuleIdentifier)


def Module_getTargetTriple(M):
    # ../llvmcapi/include/VMCore/Module.h 11
    return Module_getTargetTriple._api_(M)
Module_getTargetTriple = cdecl(STRING, 'llvmcapi', [c_void_p]) (Module_getTargetTriple)


def Module_setTargetTriple(M, T):
    # ../llvmcapi/include/VMCore/Module.h 12
    return Module_setTargetTriple._api_(M, T)
Module_setTargetTriple = cdecl(None, 'llvmcapi', [c_void_p, STRING]) (Module_setTargetTriple)


def Module_getModuleInlineAsm(M):
    # ../llvmcapi/include/VMCore/Module.h 13
    return Module_getModuleInlineAsm._api_(M)
Module_getModuleInlineAsm = cdecl(STRING, 'llvmcapi', [c_void_p]) (Module_getModuleInlineAsm)


def Module_setModuleInlineAsm(M, Asm):
    # ../llvmcapi/include/VMCore/Module.h 14
    return Module_setModuleInlineAsm._api_(M, Asm)
Module_setModuleInlineAsm = cdecl(None, 'llvmcapi', [c_void_p, STRING]) (Module_setModuleInlineAsm)


def Module_getNamedFunction(M, fnname):
    # ../llvmcapi/include/VMCore/Module.h 15
    return Module_getNamedFunction._api_(M, fnname)
Module_getNamedFunction = cdecl(c_void_p, 'llvmcapi', [c_void_p, STRING]) (Module_getNamedFunction)


def Module_ParseAssemblyString(M, AsmString):
    # ../llvmcapi/include/VMCore/Module.h 18
    return Module_ParseAssemblyString._api_(M, AsmString)
Module_ParseAssemblyString = cdecl(None, 'llvmcapi', [c_void_p, STRING]) (Module_ParseAssemblyString)


def Module_verifyModule(M):
    # ../llvmcapi/include/VMCore/Module.h 19
    return Module_verifyModule._api_(M)
Module_verifyModule = cdecl(c_int, 'llvmcapi', [c_void_p]) (Module_verifyModule)


def Module_n_functions(M):
    # ../llvmcapi/include/VMCore/Module.h 22
    return Module_n_functions._api_(M)
Module_n_functions = cdecl(c_int, 'llvmcapi', [c_void_p]) (Module_n_functions)


def Module_function_exists(M, fnname):
    # ../llvmcapi/include/VMCore/Module.h 23
    return Module_function_exists._api_(M, fnname)
Module_function_exists = cdecl(c_int, 'llvmcapi', [c_void_p, STRING]) (Module_function_exists)


def ExistingModuleProvider__init__(M):
    # ../llvmcapi/include/VMCore/ModuleProvider.h 8
    return ExistingModuleProvider__init__._api_(M)
ExistingModuleProvider__init__ = cdecl(c_void_p, 'llvmcapi', [c_void_p]) (ExistingModuleProvider__init__)


# values for enumeration 'TypeID'
TypeID = c_int # enum

def Type_getTypeID(T):
    # ../llvmcapi/include/VMCore/Type.h 32
    return Type_getTypeID._api_(T)
Type_getTypeID = cdecl(TypeID, 'llvmcapi', [c_void_p]) (Type_getTypeID)


def Type_getContainedType(T, n):
    # ../llvmcapi/include/VMCore/Type.h 33
    return Type_getContainedType._api_(T, n)
Type_getContainedType = cdecl(c_void_p, 'llvmcapi', [c_void_p, c_int]) (Type_getContainedType)


def Type_getDescription(T):
    # ../llvmcapi/include/VMCore/Type.h 34
    return Type_getDescription._api_(T)
Type_getDescription = cdecl(STRING, 'llvmcapi', [c_void_p]) (Type_getDescription)


def toggle_print_machineinstrs():
    # ../llvmcapi/include/llvmcapi.h 16
    return toggle_print_machineinstrs._api_()
toggle_print_machineinstrs = cdecl(None, 'llvmcapi', []) (toggle_print_machineinstrs)

