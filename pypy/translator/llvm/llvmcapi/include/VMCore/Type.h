#ifndef __TYPE_H__
#define __TYPE_H__

#ifdef __cplusplus
extern "C" {
#endif

// XXX can ctypes codewriter this directly from llvm/Type.h?
enum TypeID {
    // PrimitiveTypes .. make sure LastPrimitiveTyID stays up to date
    VoidTyID = 0  , BoolTyID,           //  0, 1: Basics...
    UByteTyID     , SByteTyID,          //  2, 3: 8 bit types...
    UShortTyID    , ShortTyID,          //  4, 5: 16 bit types...
    UIntTyID      , IntTyID,            //  6, 7: 32 bit types...
    ULongTyID     , LongTyID,           //  8, 9: 64 bit types...
    FloatTyID     , DoubleTyID,         // 10,11: Floating point types...
    LabelTyID     ,                     // 12   : Labels...

    // Derived types... see DerivedTypes.h file...
    // Make sure FirstDerivedTyID stays up to date!!!
    FunctionTyID  , StructTyID,         // Functions... Structs...
    ArrayTyID     , PointerTyID,        // Array... pointer...
    OpaqueTyID,                         // Opaque type instances...
    PackedTyID,                         // SIMD 'packed' format...
    //...

    NumTypeIDs,                         // Must remain as last defined ID
    LastPrimitiveTyID = LabelTyID,
    FirstDerivedTyID = FunctionTyID
  };

TypeID      Type_getTypeID(void* T);
const void* Type_getContainedType(void* T, int n);  //return a Type*
const char* Type_getDescription(void* T);

#ifdef __cplusplus
};
#endif

#endif
