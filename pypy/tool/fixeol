#! /usr/bin/env python

import sys, os


forbidden = range(0,32)
forbidden.remove(9)    # tab
forbidden.remove(10)   # lf
forbidden.remove(12)   # ^L
forbidden.remove(13)   # cr


def looksbinary(data, forbidden = [chr(i) for i in forbidden]):
    "Check if some data chunk appears to be binary."
    for c in forbidden:
        if c in data:
            return True
    return False


# hack to get the platform's native end-of-line format
f = open('@fixeol@tmp.txt', 'w')
print >> f
f.close()
f = open('@fixeol@tmp.txt', 'rb')
native_eol = f.read()
f.close()
os.unlink('@fixeol@tmp.txt')


def binary2text(filename, native_eol = native_eol):
    "Convert a file to the platform's native end-of-line format if needed."
    f = open(filename, 'rb')
    data = f.read()
    f.close()
    if looksbinary(data):
        return False
    original = data
    data = data.replace('\r\n', '\n')
    data = data.replace('\r',   '\n')
    data = data.replace('\n', native_eol)
    if data != original:
        f = open(filename, 'wb')
        f.write(data)
        f.close()
    return True


def asserttextfile(fname):
    "Assert a file is a text file or issue a warning otherwise."
    # safety check to nail binary files
    try:
        if not binary2text(fname):
            print >> sys.stderr, "*** warning, looks like a binary file:",
            print >> sys.stderr, fname
            return
    except IOError, e:
        print "skipping %r because of %s" %(fname, e)
    else:
        # change end-of-line style of each .py and .txt file to 'native'
        os.system('svn propset svn:eol-style native %s' % fname)


def fixpyfiles(ignored, dirname, fnames):
    "Fix Python files in some directory."
    numpyfiles = 0
    for fname in fnames:
        if fname.endswith('.py') or fname.endswith('.txt') or fname.endswith('.asc'):
            asserttextfile(os.path.join(dirname, fname))
            numpyfiles += 1
    if numpyfiles:
        # ignore '*.pyc' in any directory containing .py files
        g = os.popen('svn propget svn:ignore %s' % dirname)
        content = g.readlines()
        g.close()
        if '*.pyc\n' not in content:
            content.append('*.pyc\n')
            g = open('svn-ignore.tmp', 'w')
            g.writelines(content)
            g.close()
            os.system('svn propset svn:ignore -F svn-ignore.tmp %s' % dirname)
            os.unlink('svn-ignore.tmp')
    if '.svn' in fnames:
        fnames.remove('.svn')


if __name__ == '__main__':
    if len(sys.argv) > 1:
        for fname in sys.argv[1:]:
            asserttextfile(fname)
    else:
        os.path.walk(os.curdir, fixpyfiles, None)
