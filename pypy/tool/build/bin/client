#!/usr/bin/python

BUFSIZE = 1024

import path
import sys
import random
from pypy.tool.build import config

from py.execnet import SshGateway, PopenGateway
from pypy.tool.build.client import init
from pypy.config.config import to_optparse, Config
from pypy.config import pypyoption

from pypy.translator.goal import targetpypystandalone
from pypy.translator.driver import TranslationDriver
from pypy.tool.udir import udir
from zipfile import ZipFile

if config.server in ['localhost', '127.0.0.1']:
    gw = PopenGateway()
else:
    gw = SshGateway(config.server)
channel = init(gw, config.system_config, path=config.path,
                port=config.port)

class ChannelWrapper(object):
    def __init__(self, channel):
        self.channel = channel
        
    def write(self, data):
        self.channel.send(data)

    def close(self):
        self.channel.send(None)

print channel.receive() # welcome message
try:
    try:
        while 1:
            data = channel.receive()
            if isinstance(data, str):
                continue
            if not isinstance(data, tuple): # needs more checks here
                raise ValueError(
                    'received wrong unexpected data of type %s' % (
                            type(data),)
                )
            sysinfo, compileinfo = data
            # XXX we should compile here, using data dict for info
            print 'compilation requested for info %r, now faking that' % (
                    data,)
            config = pypyoption.get_pypy_config()
            config.override(compileinfo)

            # XXX compile here...
            driver = TranslationDriver.from_targetspec(
                        targetpypystandalone.__dict__, config=config,
                        default_goal='compile')
            driver.proceed(['compile'])

            channelwrapper = ChannelWrapper(channel)
            zip = ZipFile(channelwrapper, 'w')
            for fpath in udir.visit():
                zip.writestr(fpath.relto(udir), fpath.read())
            zip.close()

            print 'done with compilation, waiting for next'
    except EOFError:
        sys.exit()
finally:
    channel.close()
    gw.exit()
