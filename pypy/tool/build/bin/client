#!/usr/bin/python

import path
import sys
import random
import traceback
from pypy.tool.build import config as buildconfig

from py.execnet import SshGateway, PopenGateway
from pypy.tool.build.client import init, zip_result, OutputBuffer
from pypy.tool.build import build
from pypy.config.config import to_optparse, Config
from pypy.config import pypyoption

from pypy.interpreter.error import OperationError
from pypy.translator.goal import targetpypystandalone
from pypy.translator.driver import TranslationDriver
from pypy.tool.udir import udir

if buildconfig.server in ['localhost', '127.0.0.1']:
    gw = PopenGateway()
else:
    gw = SshGateway(buildconfig.server)
    
channel = init(gw,
               buildconfig.system_config,
               path=buildconfig.path,
               port=buildconfig.port)

def compile(config):
    driver = TranslationDriver.from_targetspec(
                targetpypystandalone.__dict__, config=config,
                default_goal='compile')
    driver.proceed(['compile'])

print channel.receive() # welcome message
try:
    try:
        while 1:
            # receive compile requests
            request = channel.receive()
            if isinstance(request, str):
                try:
                    request = build.BuildRequest.fromstring(request)
                except (KeyError, SyntaxError), e:
                    print ('exception occurred when trying to interpret the '
                           'following request:')
                    print request
                    print
                    print 'going to continue'
                    continue
            else:
                raise ValueError(
                    'received wrong unexpected data of type %s' % (
                            type(request),)
                )
            accepting = True
            for checker in buildconfig.client_checkers:
                if not checker(request):
                    if hasattr(checker, 'im_func'):
                        name = '%s.%s' % (checker.im_class.__name__,
                                          checker.im_func.func_name)
                    else:
                        name = checer.func_name
                    print 'request refused by checker', name
                    accepting = False
                    break
            channel.send(accepting)
            if not accepting:
                print 'refusing compilation'
                continue
            # XXX we should compile here, using data dict for info
            print 'compilation requested for %s\nbuilding...\n' % (request,)
            config = pypyoption.get_pypy_config()
            config.override(request.compileinfo)

            buffer = OutputBuffer(sys.__stderr__)
            sys.stdout = buffer
            sys.stderr = buffer
            exception_occurred = False

            try:
                try:
                    compile(config)
                except Exception, e:
                    exception_occurred = True
                    exc, e, tb = sys.exc_info()
                    print '=' * 79
                    print 'Exception during compilation:'
                    print '%s: %s' % (exc, e)
                    print
                    print '\n'.join(traceback.format_tb(tb))
                    print '=' * 79
                    del tb
            finally:
                sys.stdout = sys.__stdout__
                sys.stderr = sys.__stderr__

            if not exception_occurred:
                # send over zip data, end with a None
                zip_result(udir, channel)
            else:
                # just send the None
                channel.send(None)
            
            # send over logs
            channel.send(buffer.getvalue())
            
            print 'done with compilation, waiting for next'
    except EOFError:
        sys.exit()
finally:
    channel.close()
    gw.exit()

