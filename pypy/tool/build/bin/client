#!/usr/bin/python

import py
import path
import sys
import random
from pypy.tool.build import config as buildconfig

from py.execnet import SshGateway, PopenGateway
from pypy.tool.build.client import init, zip_result
from pypy.tool.build import build
from pypy.config.config import to_optparse, Config

def compile(wc, compileinfo):
    code = """\
import sys
import os
import traceback

# interpolating the path
pypath = %r

sys.path = [pypath] + sys.path
os.chdir(pypath)

# nasty, interpolating a large chunk of code (OutputBuffer)
%s

# interpolating config
compileinfo = %r

log = open('/tmp/buildclient.log', 'a')
outbuffer = OutputBuffer(log)
old_stdout = sys.__stdout__
old_stderr = sys.__stderr__
sys.stdout = outbuffer
sys.stderr = outbuffer
sys.__stdout__ = outbuffer
sys.__stderr__ = outbuffer
try:
    try:
        from pypy.interpreter.error import OperationError
        from pypy.translator.goal import targetpypystandalone
        from pypy.translator.driver import TranslationDriver
        from pypy.config import pypyoption
        from pypy.tool.udir import udir

        config = pypyoption.get_pypy_config()
        config.override(compileinfo)

        driver = TranslationDriver.from_targetspec(
                    targetpypystandalone.__dict__, config=config,
                    default_goal='compile')
        driver.proceed(['compile'])
    except Exception, e:
        # XXX we may want to check
        exception_occurred = True
        exc, e, tb = sys.exc_info()
        print '=' * 79
        print 'Exception during compilation:'
        print '%%s: %%s' %% (exc, e)
        print
        print '\\n'.join(traceback.format_tb(tb))
        print '=' * 79
        del tb
        channel.send(None)
    else:
        channel.send(str(udir))
finally:
    sys.__stdout__ = old_stdout
    sys.__stderr__ = old_stderr
    sys.stdout = sys.__stdout__
    sys.stderr = sys.__stderr__
    log.close()
channel.send(outbuffer.getvalue())
channel.close()
"""
    gw = PopenGateway()
    buffercode = py.magic.autopath().dirpath().dirpath()\
                    .join('outputbuffer.py').read()
    interpolated = code % (str(wc), buffercode, compileinfo)
    channel = gw.remote_exec(interpolated)
    upath = channel.receive()
    output = channel.receive()
    channel.close()

    return upath, output

def tempdir():
    i = 0
    tmp = py.path.local('/tmp')
    while 1:
        dirname = 'buildtemp-%s' % (i,)
        if not tmp.join(dirname).check():
            return tmp.ensure(dirname, dir=True)
        i += 1

if buildconfig.server in ['localhost', '127.0.0.1']:
    gw = PopenGateway()
else:
    gw = SshGateway(buildconfig.server)
    
channel = init(gw,
               buildconfig.system_config,
               path=buildconfig.path,
               port=buildconfig.port)

print channel.receive() # welcome message
try:
    try:
        while 1:
            # receive compile requests
            request = channel.receive()
            if isinstance(request, str):
                try:
                    request = build.BuildRequest.fromstring(request)
                except (KeyError, SyntaxError), e:
                    print ('exception occurred when trying to interpret the '
                           'following request:')
                    print request
                    print
                    print 'going to continue'
                    continue
            else:
                raise ValueError(
                    'received wrong unexpected data of type %s' % (
                            type(request),)
                )
            accepting = True
            for checker in buildconfig.client_checkers:
                if not checker(request):
                    if hasattr(checker, 'im_func'):
                        name = '%s.%s' % (checker.im_class.__name__,
                                          checker.im_func.func_name)
                    else:
                        name = checker.func_name
                    print 'request refused by checker', name
                    accepting = False
                    break
            channel.send(accepting)
            if not accepting:
                print 'refusing compilation'
                continue
            # XXX we should compile here, using data dict for info
            print 'compilation requested for %s' % (request,)

            # subversion checkout
            print 'checking out %s@%s' % (request.svnurl,
                                          request.normalized_rev)
            temp = tempdir()
            svnwc = py.path.svnwc(temp)
            svnwc.checkout(request.svnurl)
            svnwc.update(request.normalized_rev)

            try:
                print 'starting compilation'
                upath, log = compile(svnwc, request.compileinfo)
            except KeyboardInterrupt:
                print 'quitting...'
                break

            if upath:
                # send over zip data, end with a None
                print 'compilation successful, sending to server'
                zip_result(py.path.local(upath), channel)
            else:
                print 'compilation failed, notifying server'
                # just send the None
                channel.send(None)
            
            # send over logs
            print 'sending log'
            channel.send(log)
            
            print 'done with compilation, waiting for next'
    except EOFError:
        sys.exit()
finally:
    channel.close()
    gw.exit()

