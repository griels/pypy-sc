=================================================
PyPy - a Python_ implementation written in Python 
=================================================

.. _Python: http://www.python.org/dev/doc/maint24/ref/ref.html

architecture_ gives a complete view of PyPy's basic design. 

`getting started`_ provides hands-on instructions 
including a two-liner to run PyPy on your system. 

`coding guide`_ helps you to write code for PyPy. 

`object spaces`_ discusses the object space interface 
and several implementations. 

`translation`_ offers the beginnings of documentation 
about our low level code generator backends. 

`talks and related projects`_ lists presentations 
and related projects. 

`compliance test status`_ shows outcomes of 
recent compliance test runs against PyPy. 

`license`_ contains licensing details (basically a straight MIT-license). 

.. _`talks and related projects`: extradoc.html
.. _`license`: http://codespeak.net/svn/pypy/dist/LICENSE 
.. _`compliance test status`: http://codespeak.net/~hpk/pypy-testresult/
.. _`object spaces`: objspace.html 
.. _`translation`: translation.html 
.. _`coding guide`: coding-guide.html 
.. _`architecture`: architecture.html 
.. _`revision report`: http://codespeak.net/pypy/rev/current 
.. _`getting started`: getting_started.html 
.. _`theory`: theory.html


.. _`directory reference`: 

PyPy directory cross-reference 
======================================================

Here is a fully referenced alphabetical two-level deep 
directory overview of PyPy: 

============================   =========================================== 
Directory                      explanation/links
============================   =========================================== 
`annotation/`_                 `type inferencing code`_ for `RPython`_ programs 

`documentation/`_              text versions of PyPy `documentation`_ files shown on the website 

`documentation/revreport/`_    the source code for the `revision report`_ 

`documentation/website/`_      text versions of the navigation webpages 

`interpreter/`_                bytecode interpreter and related objects (frames, functions, modules,...) 

`lib/`_                        PyPy's wholesale reimplementations of CPython modules_

`lib/test2/`_                  tests running at interp-level against the reimplementations 

`module/`_                     contains `mixed modules`_ implementing core modules with 
                               both application and interpreter level code 

`module/_sre_pypy/`_           an experimental approach wrapping CPython's ``_sre`` module 
                               without using faking 

`module/__builtin__/`_         full implementation of CPython's ``__builtin__`` module. 

`module/parser/`_              parser package from Jonathan David Riehl's `basil`_ package

`module/recparser/`_           parser package from Logilab 

`module/sys/`_                 implementation of CPython's ``sys`` module.  

`objspace/`_                   `object space`_ implementations

`objspace/trace.py`_           the `trace object space`_ monitoring bytecode and space operations

`objspace/thunk.py`_           the `thunk object space`_, providing unique object features 

`objspace/flow/`_              the FlowObjSpace_ implementing `abstract interpretation`

`objspace/std/`_               the StdObjSpace_ implementing CPython's objects and types

`rpython/`_                    the `RPython Typer`_ 

`tool/`_                       various utilities and hacks used from various places 

`tool/pytest/`_                support code for our `testing methods`_

`tool/tb_server/`_             a somewhat outdated http-server for presenting 
                               tracebacks in a helpful manner 

`translator/`_                 translation_ backends and support code

`translator/genc/`_            the `GenC backend`_ producing a CPython C-extension 
                               module from a given RPython program. 

`translator/java/`_            experimental code to utilize Java for annotation 

`translator/llvm/`_            contains the `LLVM backend`_ producing LLVM assembler 
                               from fully annotated RPython programs 

`translator/tool/`_            helper tools for translation 

``*/test/``                    many directories have a test subdirectory containing test 
                               modules (see `Testing in PyPy`_) 

``_cache/``                    holds cache files from internally translating application 
                               level to interpreterlevel code.  (insert link when 
                               `issue40`_ is resolved). 
============================   =========================================== 

.. _documentation: index.html
.. _`Testing in PyPy`: coding-guide.html#testing-in-pypy 
.. _`mixed modules`: coding-guide.html#mixed-modules 
.. _`modules`: coding-guide.html#modules 
.. _`basil`: http://people.cs.uchicago.edu/~jriehl/BasilTalk.pdf
.. _`object space`: objspace.html
.. _FlowObjSpace: objspace.html#the-flow-object-space 
.. _`trace object space`: objspace.html#the-trace-object-space 
.. _`thunk object space`: objspace.html#the-thunk-object-space 
.. _StdObjSpace: objspace.html#the-standard-object-space 
.. _`abstract interpretation`: theory.html#abstract-interpretation
.. _`rpython`: coding-guide.html#rpython 
.. _`type inferencing code`: translation.html#the-annotation-pass 
.. _`RPython Typer`: translation.html#rpython-typer 
.. _`testing methods`: coding-guide.html#testing-in-pypy
.. _`translation`: translation.html 
.. _`GenC backend`: translation.html#genc 
.. _`LLVM backend`: translation.html#llvm 
.. _`revision report`: http://codespeak.net/pypy/rev/current 


.. include:: _ref.txt
