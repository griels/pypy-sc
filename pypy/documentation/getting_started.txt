==================================
Getting started with PyPy
==================================

.. contents::
.. sectnum::

.. _howtopypy: 

Just the facts 
============== 

getting & running the PyPy 0.6 release 
---------------------------------------

Download one of the following release files and unpack it: 

*pypy-0.6 (not released yet)*
    
    * download `pypy-0.6.zip` or `pypy-0.6.tar.gz` and unpack it 
    
    * alternatively run ``svn co http://codespeak.net/svn/pypy/tag/0.6 pypy-0.6`` 

then change to the ``pypy-0.6`` directory
and execute the following command line:: 

    python pypy/interpreter/py.py 

This will give you a PyPy prompt, i.e. a very compliant 
Python interpreter implemented in Python.  Because this version
of PyPy still runs on top of CPython, it runs around 3000-4000
times slower than the original CPython.  The 0.6 release focus 
really was on compliancy: PyPy passes around `90% of CPythons core 
language regression tests`_. 

You may go to the more `detailed version`_ of this two-liner. 

.. _`90% of CPythons core language regression tests`: http://codespeak.net/~hpk/pypy-testresult/ 

Svn-check out & run the latest PyPy as a two-liner
--------------------------------------------------

If you want to play with the ongoing development PyPy version 
you can check it out from the repository using subversion. Download 
and install subversion_ if you don't allready have it. Then you can
issue on the command line (DOS box or terminal)::

    svn co http://codespeak.net/svn/pypy/dist pypy-dist 

This will create a directory named ``pypy-dist``, and will get you the PyPy
source in ``pypy-dist/pypy`` and documentation files in
``pypy-dist/pypy/documentation``.

After checkout you can get a PyPy interpreter via:: 

    python pypy-dist/pypy/interpreter/py.py 

have fun :-) 

If you want to know more how to get started with subversion read this_. 
You may also want to go to more `detailed version`_ of this 
two-liner below.

Understanding PyPy's architecture
---------------------------------

For in-depth information about architecture and coding style head over 
to the `documentation section`_ where you'll find lots of interesting 
information.  Additionally, in true hacker spirit, you may just 
`start reading sources`_ . 

.. _`documentation section`: index.html 

running all of PyPy's tests  
---------------------------

If you want to see if PyPy works on your machine/platform 
you can simply run PyPy's large test suite with:: 

    python pypy/test_all.py 

test_all.py is just another name for `py.test`_ which is the
testing tool that we are using and enhancing for PyPy.   

.. _`py.test`: http://codespeak.net/py/current/doc/test.html 
.. _`detailed version`: 

The long'n detailed version of how to use PyPy
==============================================

The following assumes that you have successfully downloaded and exctracted the
PyPy release or have checked out PyPy using svn. It assumes that you are in
the top level directory of the PyPy source tree, e.g. pypy-x.x (if you
got a release) or pypy-dist (if you checked out the most recent version using
subversion).

1. To start interpreting Python with PyPy, use Python 2.3 or greater::

        cd pypy/interpreter 
        python py.py

   After a few seconds, you should be at the PyPy prompt, which is
   the same as the Python prompt, but with an extra ">".

2. Now you are ready to start running Python code.  Some real Python
   modules will not run yet, and others will run too slowly to be
   worth waiting for, but a few are fun to run::
   
        >>>> from test import pystone 
        >>>> pystone.main(10)

   Note that this is a slightly modified version of pystone -- the
   original version does not accept the parameter to main().  The
   parameter is the number of loops to run through the test, and the
   default is 50000, which is far too many to run in a reasonable time
   on the current PyPy implementation.


3. To list the PyPy interpreter command line options, type::

        cd pypy/interpreter 
        python py.py --help

   As an example of using PyPy from the command line, you could type::

        python py.py -c "from test import pystone; pystone.main(10)"

   Alternatively, as with regular Python, you can simply give a
   script name on the command line::

        python py.py ../../lib-python/modified-2.3.4/test/pystone.py 10

4. The PyPy project uses test-driven-development.  Right now, there are
   a couple of different categories of tests which you can run.
   To run all the unit tests::

        cd pypy
        python test_all.py

   Alternatively, you may run subtests by going to the correct subdirectory
   and running them individually::

        python test_all.py module/test/test_builtin.py

   ``test_all.py`` is actually just a synonym for `py.test`_ which is 
   our external testing tool. If you have installed that then you 
   can as well just issue ``py.test DIRECTORY_OR_FILE`` in order 
   to perform test runs or simply start it without arguments to 
   run all tests below the current directory. 

   Finally, there are standard regression tests which you can 
   run like this::

        cd lib-python-2.3.4/test 
        python ../../pypy/test_all.py -E

   or if you have `installed py.test`_ then you simply say::

        py.test -E

   from the lib-python-2.3.4/test directory. 

.. _`installed py.test`: http://codespeak.net/py/current/doc/getting_started.html

Trying out the translator
------------------------- 

The translator is a tool based on the PyPy interpreter which can translate
sufficiently static Python programs into low-level code.

1. Download and install `Dot Graphviz`_.

2. Download and install Pygame_ if you do not already have it.

3. Type::

        cd pypy/translator
        python -i translator.py

   Test snippets of translatable code are provided in the file
   ``test/snippet.py``.  For example::

        >>> t = Translator(test.is_perfect_number)
        >>> t.view()
        
.. >>> from pypy.translator.translator import Translator 
.. >>> from pypy.translator.test import snippet as test 

4. We have a type annotator that can completely infer types for functions like
   ``is_perfect_number``::

        >>> a = t.annotate([int])
        >>> t.view()

   Move the mouse over variable names (in red) to see their inferred types. To
   perform simplifications based on the annotation you can do::

        >>> a.simplify()

5. The graph can be turned into Pyrex code, with types if ``annotate()`` was
   called::

        >>> print t.pyrex()
        >>> f = t.compile()
        >>> f(28)
        1

   Note how the strange-looking Pyrex code is unrelated to the original
   Python source code.  This is because the Pyrex code is generated from the
   graph only, without reference to the original source.

6. In the same manner the graph can be compiled to C code::

       >>> a.specialize()
       >>> f = t.ccompile()

   The first command replaces operations with variables of types that are
   avaiable in C (e.g. int) with low level version. This can be ommited if no
   annotation (step 4) has been performed.

7. If you feel adventureous (and have LLVM installed and on your path) you can
   also try to compile the graph with LLVM. This is still quite experimental
   and only works with some functions: One of the most visible restriction is
   that return type of the entry function has to be and int, float or bool. To
   try it do::

       >>> from pypy.translator.llvm.genllvm import llvmcompile
       >>> f = llvmcompile(t, optimize=True)
       >>> f(28)
       1

   This works only with fully annotated graphs.


.. _`start reading sources`: 
   
Where to start reading the sources
---------------------------------- 

PyPy is made from parts that are relatively independent from each other.
You should start looking at the part that attracts you most (all parts are
relative to the PyPy toplevel directory):

*  `pypy/interpreter`_ contains the basic interpreter: bytecode dispatcher
   in pyopcode.py_, frame and code objects in eval.py_ and pyframe.py_,
   function objects and argument passing in function.py_ and argument.py_,
   the object space interface definition in baseobjspace.py_, modules in
   module.py_ and lazymodule.py_.  Core types supporting the interpreter are
   defined in typedef.py_.

*  `pypy/objspace/std`_ contains the `Standard object space`_.  The main file
   is objspace.py_.  For each type, the files ``xxxtype.py`` and
   ``xxxobject.py`` contain respectively the definition of the type and its
   (default) implementation.

*  `pypy/objspace`_ contains a few other object spaces: the thunk_
   one, the trace_ one, the flow_ one.  The latter is a relatively short piece
   of  code that builds the control flow graphs when the interpreter runs in it.

*  `pypy/translator`_ contains the code analysis and generation stuff.
   Start reading from translator.py_, from which it should be easy to follow
   the pieces of code involved in the various translation phases.

*  `pypy/annotation`_ contains the data model for the type annotation that
   can be inferred about a graph.  The graph "walker" that uses this is in
   `pypy/translator/annrpython.py`_.


To learn more
------------- 

*  To learn more about PyPy and its development process, head
   read around in the documentation_ and the wiki_, and consider 
   subscribing to the `mailing lists`_ (or simply
   read the archives online) or show up irc.freenode.net:6667, channel #pypy.
   The logs of the channel can be found at http://nimrod.terra-link.net/pypy/_.

*  To help PyPy become Python-the-next-generation, you may write some 
   `unit tests`_ and file some `bug reports`_.

.. _optionaltool: 

Additional Tools for running (and hacking) PyPy 
-----------------------------------------------

We use some optional tools for working on pypy. They are not required to run 
the basic tests or to get an interactive PyPy prompt but they help to
understand  and debug PyPy especially for the ongoing translation work.  

Recommended tools 
+++++++++++++++++

*graphviz* 

	(used for visualizing the control-flow)
	http://www.research.att.com/sw/tools/graphviz/download.html 

*pygame*

	(to visualize control flow and annotation analysis of python programs)
	http://www.pygame.org/download.shtml

Optional tools 
++++++++++++++ 

*llvm* 

    (used for the optional LLVM translation backend)
    One of our backends uses the `low level virtual machine`_ to generate
    processor independant machine level code.

*CLISP* 

    (used for the optional Lisp translation backend)
	http://clisp.cons.org/_

.. _`low level virtual machine`: http://llvm.cs.uiuc.edu/

--------------------------------------------------------------------------------

.. _Dot Graphviz:           http://www.research.att.com/sw/tools/graphviz/
.. _Pygame:                 http://www.pygame.org/
.. _pypy/interpreter:   http://codespeak.net/svn/pypy/dist/pypy/interpreter/
.. _pyopcode.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/pyopcode.py
.. _eval.py:                http://codespeak.net/svn/pypy/dist/pypy/interpreter/eval.py
.. _pyframe.py:             http://codespeak.net/svn/pypy/dist/pypy/interpreter/pyframe.py
.. _function.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/function.py
.. _argument.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/argument.py
.. _baseobjspace.py:        http://codespeak.net/svn/pypy/dist/pypy/interpreter/baseobjspace.py
.. _module.py:              http://codespeak.net/svn/pypy/dist/pypy/interpreter/module.py
.. _lazymodule.py:          http://codespeak.net/svn/pypy/dist/pypy/interpreter/lazymodule.py
.. _typedef.py:             http://codespeak.net/svn/pypy/dist/pypy/interpreter/typedef.py
.. _pypy/objspace/std:  http://codespeak.net/svn/pypy/dist/pypy/objspace/std/
.. _Standard object space:  http://codespeak.net/pypy/index.cgi?doc/stdobjspace.html
.. _objspace.py:            http://codespeak.net/svn/pypy/dist/pypy/objspace/std/objspace.py
.. _pypy/objspace:      http://codespeak.net/svn/pypy/dist/pypy/objspace/
.. _thunk:                  http://codespeak.net/svn/pypy/dist/pypy/objspace/thunk.py
.. _trace:                  http://codespeak.net/svn/pypy/dist/pypy/objspace/trace.py
.. _flow:                   http://codespeak.net/svn/pypy/dist/pypy/objspace/flow/
.. _pypy/translator:    http://codespeak.net/svn/pypy/dist/pypy/translator/
.. _translator.py:          http://codespeak.net/svn/pypy/dist/pypy/translator/translator.py
.. _pypy/annotation:    http://codespeak.net/svn/pypy/dist/pypy/annotation/
.. _pypy/translator/annrpython.py: http://codespeak.net/svn/pypy/dist/pypy/translator/annrpython.py
.. _mailing lists:          http://codespeak.net/pypy/index.cgi?lists
.. _documentation:          http://codespeak.net/pypy/index.cgi?doc
.. _wiki:                   http://codespeak.net/moin/pypy/moin.cgi/FrontPage?action=show
.. _unit tests:             http://codespeak.net/pypy/index.cgi?doc/testdesign.html
.. _bug reports:            https://codespeak.net/issue/pypy-dev/




.. _subversion: svn-help.html
.. _this: svn-help.html
