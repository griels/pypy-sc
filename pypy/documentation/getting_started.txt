==================================
Getting started with PyPy
==================================

.. contents::
.. sectnum::

.. _howtopypy: 

Just the facts 
============== 

Checking out & running PyPy as a two-liner 
------------------------------------------ 

The public releases are avaiable on the `download page`_. If you want the
bleeding edge development version you can also do:: 

    svn co http://codespeak.net/svn/pypy/dist pypy-dist 

and after checkout you can get a PyPy interpreter via:: 

    python pypy-dist/pypy/interpreter/py.py 

have fun :-) 

You can also go the more `detailed version`_ of this two-liner. 

Browsing via HTTP and getting an svn client
-------------------------------------------

You can `browse the pypy source code`_ directly via http.
(sorry, viewcvs is still not stable enough with subversion).
And here is some information to `install a subversion client`_. 

.. _`browse the pypy source code`: http://codespeak.net/svn/pypy/dist 
.. _`download page`: http://codespeak.net/pypy/XXX_download_page_XXX

coding style and testing 
------------------------ 

We keep a strong focus on testing because we want to be able
to refactor things all the time (without proper automated 
testing this would become very hard and fragile).  

For an overview of how we organize our codebase please look at our 
`coding-guide document`_.

For running all PyPy tests you can issue:: 

    cd pypy-dist/pypy/
    python test_all.py 

test_all.py really is another name for `py.test`_ which is a testing
tool working from the current directory unless you specify 
filename/directory arguments. 

If you want to have write access to the codespeak respository
please send a mail to *jum at anubis han de* or *hpk at merlinux de*
in order to ask for a username and password.  Please mention what you want to do
within the pypy project. Even better, come to our next sprint so that we can
get to know you.  

Viewing documentation 
---------------------

PyPy documentation is generated from reST textfiles in the pypy/documentation directory 
of our pypy-subversion repository.  Go to the `documentation start page`_  
and look around.   

.. _`documentation start page`: index.html 
.. _`coding-guide document`: coding-guide.html 
.. _`py.test`: http://codespeak.net/py/current/doc/test.html 

.. _`detailed version`: 

The long'n detailed version 
===========================

PyPy sources can be browsed on the web at:

    http://codespeak.net/svn/pypy/dist 

Once you are ready to download and try PyPy out,
follow these instructions, which assume that you
are working in a DOS box (Windows) or terminal (MacOS/X or Linux).

detailed steps
--------------

1. Download and install subversion_ if you do not already have it.

2. Change to the directory where you wish to install the source tree,
   and use subversion to download the source::

        svn co http://codespeak.net/svn/pypy/dist pypy-dist 

   This will create a directory named ``pypy-dist``, and will get
   you the PyPy source in ``pypy-dist/pypy`` and documentation
   files in ``pypy-dist/pypy/documentation``. 
   
3. To start interpreting Python with PyPy, use Python 2.3 or greater::

        cd pypy-dist/pypy/interpreter 
        python py.py

   After a few seconds, you should be at the PyPy prompt, which is
   the same as the Python prompt, but with an extra ">".

4. Now you are ready to start running Python code.  Some real Python
   modules will not run yet, and others will run too slowly to be
   worth waiting for, but a few are fun to run::
   
        >>>> from test import pystone 
        >>>> pystone.main(10)

   Note that this is a slightly modified version of pystone -- the
   original version does not accept the parameter to main().  The
   parameter is the number of loops to run through the test, and the
   default is 50000, which is far too many to run in a reasonable time
   on the current PyPy implementation.


5. To list the PyPy interpreter command line options, type::

        cd pypy-dist/pypy/interpreter 
        python py.py --help

   As an example of using PyPy from the command line, you could type::

        python py.py -c "from test import pystone; pystone.main(10)"

   Alternatively, as with regular Python, you can simply give a
   script name on the command line::

        python py.py ../../lib-python/modified-2.3.4/test/pystone.py 10


6. The PyPy project uses test-driven-development.  Right now, there are
   a couple of different categories of tests which you can run.
   To run all the unit tests::

        cd pypy-dist/pypy
        python test_all.py

   Alternatively, you may run subtests by going to the correct subdirectory
   and running them individually::

        cd pypy-dist/pypy
        python test_all.py module/test/test_builtin.py

   ``test_all.py`` is actually just a synonym for `py.test`_ which is 
   our external testing tool. If you have installed that then you 
   can as well just issue ``py.test DIRECTORY_OR_FILE`` in order 
   to perform test runs or simply start it without arguments to 
   run all tests below the current directory. 

   Finally, there are standard regression tests which you can 
   run like this::

        cd pypy-dist/lib-python-2.3.4/test 
        python ../../pypy/test_all.py 

   or if you have `installed py.test`_ then you simply say::

        py.test 

   from the lib-python-2.3.4/test directory. 

.. _`installed py.test`: http://codespeak.net/py/current/doc/getting_started.html

Trying out the translator
------------------------- 

The translator is a tool based on the PyPy interpreter which can translate
sufficiently static Python programs into low-level code.

1. Download and install `Dot Graphviz`_.

2. Download and install Pygame_ if you do not already have it.

3. Type::

        cd pypy-dist/pypy/translator
        python -i translator.py

   Test snippets of translatable code are provided in the file
   ``test/snippet.py``.  For example::

        >>> t = Translator(test.is_perfect_number)
        >>> #t.view()
        
.. >>> from pypy.translator.translator import Translator 
.. >>> from pypy.translator.test import snippet as test 

4. We have a type annotator that can completely infer types for functions like
   ``is_perfect_number``::

        >>> a = t.annotate([int])
        >>> #t.view()

   Move the mouse over variable names (in red) to see their inferred types. To
   perform simplifications based on the annotation you can do::

        >>> a.simplify()

5. The graph can be turned into Pyrex code, with types if ``annotate()`` was
   called::

        >>> print t.pyrex()
        >>> f = t.compile()
        >>> f(28)
        1

   Note how the strange-looking Pyrex code is unrelated to the original
   Python source code.  This is because the Pyrex code is generated from the
   graph only, without reference to the original source.

6. In the same manner the graph can be compiled to C code::

       >>> a.specialize()
       >>> f = t.ccompile()

   The first command replaces operations with variables of types that are
   avaiable in C (e.g. int) with low level version. This can be ommited if no
   annotation (step 4) has been performed.

7. If you feel adventureous (and have LLVM installed and on your path) you can
   also try to compile the graph with LLVM. This is still quite experimental
   and only works with some functions: One of the most visible restriction is
   that return type of the entry function has to be and int, float or bool. To
   try it do::

       >>> from pypy.translator.llvm.genllvm import llvmcompile
       >>> f = llvmcompile(t, optimize=True)
       >>> f(28)
       1

   This works only with fully annotated graphs.

   

Where to start reading the sources
---------------------------------- 

PyPy is made from parts that are relatively independent from each other.
You should start looking at the part that attracts you most:

*  `pypy-dist/pypy/interpreter`_ contains the basic interpreter: bytecode dispatcher
   in pyopcode.py_, frame and code objects in eval.py_ and pyframe.py_,
   function objects and argument passing in function.py_ and argument.py_,
   the object space interface definition in baseobjspace.py_, modules in
   module.py_ and lazymodule.py_.  Core types supporting the interpreter are
   defined in typedef.py_.

*  `pypy-dist/pypy/objspace/std`_ contains the `Standard object space`_.  The main file
   is objspace.py_.  For each type, the files ``xxxtype.py`` and
   ``xxxobject.py`` contain respectively the definition of the type and its
   (default) implementation.

*  `pypy-dist/pypy/objspace`_ contains a few other object spaces: the thunk_
   one, the trace_ one, the flow_ one.  The latter is a relatively short piece
   of  code that builds the control flow graphs when the interpreter runs in it.

*  `pypy-dist/pypy/translator`_ contains the code analysis and generation stuff.
   Start reading from translator.py_, from which it should be easy to follow
   the pieces of code involved in the various translation phases.

*  `pypy-dist/pypy/annotation`_ contains the data model for the type annotation that
   can be inferred about a graph.  The graph "walker" that uses this is in
   `pypy-dist/pypy/translator/annrpython.py`_.


To learn more
------------- 

*  To learn more about PyPy and its development process, head
   read around in the documentation_ and the wiki_, and consider 
   subscribing to the `mailing lists`_ (or simply
   read the archives online) or show up irc.freenode.net:6667, channel #pypy.

*  To help PyPy become Python-the-next-generation, you may write some 
   `unit tests`_ and file some `bug reports`_.

.. _optionaltool: 

Additional Tools for running (and hacking) PyPy 
-----------------------------------------------

We use some optional tools for working on pypy. They are not required to run 
all the tests or to get an interactive PyPy prompt but they help to understand 
and debug PyPy.  

Recommended tools 
+++++++++++++++++

* graphviz::

	(used for visualizing the control-flow)
	http://www.research.att.com/sw/tools/graphviz/download.html_

* pygame::

	(to visualize control flow and annotation analysis of python programs)
	http://www.pygame.org/download.shtml_

	- on MAC OSX:  XXX  (please provide help on how to sanely
      install pygame on OSX) 

Optional tools 
++++++++++++++ 

* llvm: 
    One of our backends uses the `low level virtual machine`_ to generate
    processor independant machine level code.

* CLISP::

	http://clisp.cons.org/_

.. _`low level virtual machine`: http://llvm.cs.uiuc.edu/


--------------------------------------------------------------------------------

.. _Dot Graphviz:           http://www.research.att.com/sw/tools/graphviz/
.. _Pygame:                 http://www.pygame.org/
.. _pypy-dist/pypy/interpreter:   http://codespeak.net/svn/pypy/dist/pypy/interpreter/
.. _pyopcode.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/pyopcode.py
.. _eval.py:                http://codespeak.net/svn/pypy/dist/pypy/interpreter/eval.py
.. _pyframe.py:             http://codespeak.net/svn/pypy/dist/pypy/interpreter/pyframe.py
.. _function.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/function.py
.. _argument.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/argument.py
.. _baseobjspace.py:        http://codespeak.net/svn/pypy/dist/pypy/interpreter/baseobjspace.py
.. _module.py:              http://codespeak.net/svn/pypy/dist/pypy/interpreter/module.py
.. _lazymodule.py:          http://codespeak.net/svn/pypy/dist/pypy/interpreter/lazymodule.py
.. _typedef.py:             http://codespeak.net/svn/pypy/dist/pypy/interpreter/typedef.py
.. _pypy-dist/pypy/objspace/std:  http://codespeak.net/svn/pypy/dist/pypy/objspace/std/
.. _Standard object space:  http://codespeak.net/pypy/index.cgi?doc/stdobjspace.html
.. _objspace.py:            http://codespeak.net/svn/pypy/dist/pypy/objspace/std/objspace.py
.. _pypy-dist/pypy/objspace:      http://codespeak.net/svn/pypy/dist/pypy/objspace/
.. _thunk:                  http://codespeak.net/svn/pypy/dist/pypy/objspace/thunk.py
.. _trace:                  http://codespeak.net/svn/pypy/dist/pypy/objspace/trace.py
.. _flow:                   http://codespeak.net/svn/pypy/dist/pypy/objspace/flow/
.. _pypy-dist/pypy/translator:    http://codespeak.net/svn/pypy/dist/pypy/translator/
.. _translator.py:          http://codespeak.net/svn/pypy/dist/pypy/translator/translator.py
.. _pypy-dist/pypy/annotation:    http://codespeak.net/svn/pypy/dist/pypy/annotation/
.. _pypy-dist/pypy/translator/annrpython.py: http://codespeak.net/svn/pypy/dist/pypy/translator/annrpython.py
.. _mailing lists:          http://codespeak.net/pypy/index.cgi?lists
.. _documentation:          http://codespeak.net/pypy/index.cgi?doc
.. _wiki:                   http://codespeak.net/moin/pypy/moin.cgi/FrontPage?action=show
.. _unit tests:             http://codespeak.net/pypy/index.cgi?doc/testdesign.html
.. _bug reports:            https://codespeak.net/issues/pypy-dev/




.. _subversion:
.. _`install a subversion client`:  
.. _howtosvn: 

subversion
========== 


The PyPy codebase, documentation and web pages are controlled by subversion.
If you already know how to use it here is the URL you need to interact
with subversion:

``http://codespeak.net/svn/pypy/dist``

If you don't know what to do then Jens-Uwe Mager has prepared some 
installation files which should help you to install subversion on
your computer. 

+ Download Unix source tarball or prepackaged versions_ for MacOS, Windows, FreeBSD and Linux

+ Additional information for Windows users:

  *  See Microsoft website_ if you have .DLL issues.

  *  Windows Installer file for Tortoise SVN (like Tortoise CVS) GUI_
     (Pick the UNICODE version for Windows 2000 and XP and 
     see Win_ 2000, NT if you have problems loading it.)

+ Local copy of MacOS_ X binary tar ball
  (This requires at least OS X 10.3)

+ Debian instructions below...

btw, HowToInstallServer_ sketches how to install a subversion server on Linux (not as easy as the client install). You don't need to install server side files to get your client going. 

Getting started
-----------------

If you're just getting started with subversion, here's a simple how-to.
For complete information, you can go read the subversion guide_.

**Download and install the appropriate installation file of subversion above.**

For linux: 

download the tarball.  unzip and untar it.  Then type *./configure*.  Then, as root, *make* followed by *make install*.  Voilà ... a subversion client.

For Debian users::

  $ apt-get install subversion-tools

People using Debian *stable* first need to add the following line to ``/etc/apt/sources.list`` (thanks backports_!)::

  deb http://fs.cs.fhm.edu/mirror/backports.org/debian stable subversion

Note that you can always go look at the files online_ with your browser, located at: http://codespeak.net/svn/pypy/dist
But, you'll want to check out your own local copies to work on.

Check out and Check in
----------------------------

There are currently two directories you'll want to check out: /src and /doc
In order to get the sourcecode and docs downloaded onto your drive, open a shell or commandline and type::

  $ svn co http://codespeak.net/svn/pypy/dist
  $ svn co http://codespeak.net/svn/pypy/extradoc

If you are behind a dump proxy this may or may not work; see below.

Once you've got the files checked out to your own system, you can use your favorite text editor to change to files. Be sure to read the coding-guide_ and other documentation files before doing a lot of work on the source code. Before doing any work, make sure you're using the most recent update with::

  $ svn up

this will update whichever subdirectory you're in (doc or src).

When you're ready to **check in** a file,

cd to your local checked out sourcecode directory, and if necessary, copy the file over from wherever you worked on it::

 $ cp ~/mydir/filename.ext filename.ext

If you're adding a brand-new file::

  $ svn add filename.ext

Then, to **commit** it::

 $ svn ci -m "your comments about what changes your committing"
 $ your password: (this may not be necessary)

You'll see something like the following::

 Adding         goals/stringcomp.py
 Transmitting file data .
 Committed revision 578.

or::

 Sending        coding-guide.txt
 Transmitting file data .
 Committed revision 631.

Check online on the check-in archives_ and you'll see your revision. Feel free to add a documentation file on any major changes you've made!  

Some other useful subversion tricks:
--------------------------------------

**Be sure to remember ``svn`` in the commandline in the following commands.**

``$ svn mv filename.ext``
    to move or rename a file

``$ svn rm filename.ext``
    to remove (delete) a file

``$ svn status``
    will let you know what changes you've made compared to the current repository version

``$ svn revert filename.ext``
    will fix problems if you deleted or moved a file without telling svn.

``$ svn cleanup``
    last resort to fix it if you've got a totally messed up local copy.
    Use this if you see error messages about ``locked`` files that you can't fix otherwise.

Circumventing proxies
----------------------------

Some proxies don't let extended HTTP commands through.  If you have an
error complaining about a bad request, you can ask subversion to use the
alternate port 8080 to connect to codespeak.net by adding the following
lines in a file ``~/.subversion/servers`` (on Unix) or
``%APPDATA%\Subversion\servers`` (on Windows)::

    [groups]
    codespeak = codespeak.net

    [codespeak]
    http-proxy-host = codespeak.net
    http-proxy-port = 8080

How to Avoid Line-ending Hell
-----------------------------

We will assume that whenever you create a .txt or a .py file, you would
like other people to be able to read it with the line endings their
OS prefers, even if that is different from the one your OS likes.  This
could occasionally be wrong -- say when you are specifically testing
that code you are writing handles line endings properly -- but this is
what you want by default.  Binary files, on the other hand, should be
stored exactly as is. This has to be set on every client. Here is how:

In your home directory edit .subversion/config and comment in ::

   enable-auto-props = yes

   *.txt = svn:eol-style=native

and add a line for .py files.

--------------------------------------------------------------------------------


.. _website: http://support.microsoft.com/default.aspx?scid=kb%3Ben-us%3B259403
.. _GUI: http://tortoisesvn.tigris.org/servlets/ProjectDocumentList?folderID=616
.. _MacOS: http://codespeak.net/~jum/svn-1.1.3-darwin-ppc.tar.gz
.. _versions: http://subversion.tigris.org/project_packages.html
.. _Win: http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=4B6140F9-2D36-4977-8FA1-6F8A0F5DCA8F

.. _guide: http://svnbook.red-bean.com/book.html#svn-ch-1
.. _archives: http://codespeak.net/pipermail/pypy-svn/
.. _online: http://codespeak.net/svn/pypy/dist/
.. _coding-guide: coding-guide.html 
.. _HowToInstallServer: http://codespeak.net/moin/pypy/moin.cgi/HowToInstallServer
.. _backports: http://www.backports.org

