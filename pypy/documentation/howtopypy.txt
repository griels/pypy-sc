==================================
Getting started with PyPy
==================================

.. contents::
.. sectnum::

Just the facts 
============== 


Checking out & running PyPy as a two-liner 
------------------------------------------ 

There is no public release yet, but you can easily do:: 

    svn co http://codespeak.net/svn/pypy/dist dist-pypy 

and after checkout you can get a PyPy interpreter via:: 

    python dist-pypy/pypy/interpreter/py.py 

have fun :-) 

You can also go the more `detailed version`_ of this 
two-liner. 

Browsing via HTTP and getting an svn client
-------------------------------------------

You can `browse the pypy source code`_ directly via http.
(sorry, viewcvs is still not stable enough with subversion).
And here is some information to `install a subversion client`_. 

.. _`install a subversion client`: howtosvn.html 
.. _`browse the pypy source code`: http://codespeak.net/svn/pypy/dist 

coding style and testing 
------------------------ 

We keep a strong focus on testing because we want to be able
to refactor things all the time (without proper automated 
testing this would become very hard and fragile).  

For an overview of how we organize our codebase please look at our 
`coding-style document`_.   

For running all PyPy tests you can issue:: 

    cd dist-pypy/pypy/
    python test_all.py 

test_all.py really is another name for `py.test`_ which is a testing
tool working from the current directory unless you specify 
filename/directory arguments. 

If you want to have write access to the codespeak respository
please send a mail to <b>jum at anubis han de</b> or <b>hpk at merlinux de</b>
in order to ask for a username and password.  Please mention what you want to do
within the pypy project. Even better, come to our next sprint so that we can get
to know you.  

.. _`documentation start page`: http://codespeak.net/pypy/index.cgi?doc/index.html 
.. _`coding-style document`: http://codespeak.net/pypy/index.cgi?doc/coding-style.html 
.. _`py.test`: http://codespeak.net/py/current/doc/test.html 


PyPy Documentation
==================

Viewing documentation 
---------------------

PyPy documentation is generated from reST textfiles in the pypy/documentation directory of
our pypy-subversion repository.  Go to the `documentation start page`_ and hit
"recently modified" to get a list of recently modified documents.  While in 
"doc-view" you also have a navigation area on the left side which maps all 
documentation files. 

Adding documentation 
-------------------- 

Please add new or updated documentation by checking it in to the appropriate 
directory in subversion, usually under 
http://codespeak.net/svn/pypy/dist/pypy/documentation 

+ Remember to run ``svn up`` **before** doing any commit.
+ All filenames should be lowercase, and documentation should be .txt files.
+ Mark-up the documentation with reST so it can generate a pretty html version.
+ On the server side a commit on the doc-subtree will immediately update the webpage. 

*Note*  If you don't markup the textfile, it'll still be checked in, but when docutils 
runs the parser, it'll look ugly on the website. So run docutils yourself before you commit it. 

Some reST basics:
-----------------

There should be a title on your page. Do it like this::

 Here is my Title
 ==================

 Here is a section title
 -------------------------

Make sure you have a blank line after your = or - lines or it will give you an error.
For marking a block of code so it'll look right, you can::

 Put a line of text ending with ::
  indent your code at least one space
  my code
    more code
      even more code
  still more code

End of the "block" occurs whenever you unindent back to the same level as the
text with the ``::`` at the end.

Using an underscore after a word like this_ will make reST think you want a hyperlink.
To avoid that (especially with things like ``wrap_``), you can use the `` back quote ``
to mark it as plain text.

You can get more info on reST markup at http://docutils.sourceforge.net/docs/rst/quickref.html

Checking your work
------------------------

In order to make sure that what you commit looks reasonably pretty (or at least not
entirely broken), you'll need to run the ``docutils`` parser on it. Unless you've
installed it in the past, you probably don't have it installed. Open IDLE (or any
Python interactive environment) and try "import docutils". If it imports, hooray!
Otherwise, you'll need to download it.

Go to sourceforge and download the ``snapshot`` version. Install it.

*Note to Debian users:* Be sure you installed ``python2.2-dev``, which includes ``distutils``,
before trying to install ``docutils``.

Once you have ``docutils`` installed, you can use it go to your shell and use it like this::

 $ python ~/mypath/docutils/tools/buildhtml.py
 /// Processing directory: /home/anna/downloads/arObjSpaceDoc
     ::: Processing .txt: howtosvn.txt
     ::: Processing .txt: index.txt

**WARNING** This will process **all** text documents in the directory and any subdirectories.
I prefer to work on text in a separate directory, run the ``docutils`` parser to see what it
looks like, then copy the .txt file over to my local /doc checkouts to commit it.

Use a browser menu to go to ``File: Open: filename.html`` then you can see what it looks
like. Look at the command shell to see what errors you've got on which lines and fix it
in your textfile. You can then re-run the buildhtml.py script and see what errors you get.
After it's fixed, you can commit the .txt file and it'll automagically be turned into html
viewable on the website.


Here are some sample reST textfiles to see what it looks like:

+ ObjectSpace_
+ ObjectSpaceInterface_

.. _this: http://docutils.sourceforge.net/docs/rst/quickref.html
.. _ObjectSpace: objspace.html 
.. _ObjectSpaceInterface: objspaceinterface.html


.. _`detailed version`: 

The long'n detailed version 
===========================

PyPy sources can be browsed on the web at:

    http://codespeak.net/svn/pypy/dist 

Once you are ready to download and try PyPy out,
follow these instructions, which assume that you
are working in a DOS box (Windows) or terminal (MacOS/X or Linux).

1. Download subversion_ if you do not already have it.

2. Change to the directory where you wish to install the source tree,
   and use subversion to download the source::

        svn co http://codespeak.net/svn/pypy/dist dist-pypy

   This will create a directory named ``dist-pypy``, and will get
   you the PyPy source in ``dist-pypy/pypy`` and documentation
   files in ``dist-pypy/pypy/documentation``. 
   
3. To start interpreting Python with PyPy, use Python 2.3 or greater::

        cd dist-pypy/pypy/interpreter 
        python py.py

   After a few seconds, you should be at the PyPy prompt, which is
   the same as the Python prompt, but with an extra ">".

4. Now you are ready to start running Python code.  Some real Python
   modules will not run yet, and others will run too slowly to be
   worth waiting for, but a few are fun to run::
   
        >>>> from test2 import pystone 
        >>>> pystone.main(10)

   Note that this is a slightly modified version of pystone -- the
   original version does not accept the parameter to main().  The
   parameter is the number of loops to run through the test, and the
   default is 50000, which is far too many to run in a reasonable time
   on the current PyPy implementation.


5. To list the PyPy interpreter command line options, type::

        cd dist-pypy/pypy/interpreter 
        python py.py --help

   As an example of using PyPy from the command line, you could type::

        python py.py -c "from test2 import pystone; pystone.main(10)"

   Alternatively, as with regular Python, you can simply give a
   script name on the command line::

        python py.py ../lib/test2/pystone.py

   (Note that this will run "forever" -- actually, "just" for many
   hours, with the current implementation of PyPy.)


6. The PyPy project uses test-driven-development.  Right now, there are
   a couple of different categories of tests which you can run.
   To run all the unit tests::

        cd dist-pypy/pypy
        python test_all.py

   Alternatively, you may run subtests by going to the correct subdirectory
   and running them individually::

        cd dist-pypy/pypy
        python test_all.py module/test/test_builtin.py

   ``test_all.py`` is actually just a synonym for `py.test`_ which is 
   our external testing tool. If you have installed that then you 
   can as well just issue ``py.test DIRECTORY_OR_FILE`` in order 
   to perform test runs or simply start it without arguments to 
   run all tests below the current directory. 

   Finally, there are standard regression tests which you can 
   run like this::

        cd dist-pypy/lib-python-2.3.4/test 
        python ../../pypy/test_all.py 

   or if you have `installed py.test`_ then you simply say::

        py.test 

   from the lib-python-2.3.4/test directory. 

.. _`installed py.test`: http://codespeak.net/py/current/doc/getting_started.html

Trying out the translator
=========================

The translator is a tool based on the PyPy interpreter which can translate
sufficiently static Python programs into low-level code.

1. Download and install `Dot Graphviz`_.

2. Download and install Pygame_ if you do not already have it.

3. Type::

        cd dist-pypy/pypy/translator
        python -i translator.py

   Test snippets of translatable code are provided in the file
   ``test/snippet.py``.  For example::

        >>> t = Translator(test.is_perfect_number)
        >>> t.simplify()
        >>> t.view()

4. We have a type annotator that can completely infer types for functions like
   ``is_perfect_number``::

        >>> t.annotate([int])
        >>> t.view()

   Move the mouse over variable names (in red) to see their inferred types.

5. The graph can be turned into Pyrex code, with types if ``annotate()`` was
   called::

        >>> print t.pyrex()
        >>> f = t.compile()
        >>> f(28)
        1

   Note how the strange-looking Pyrex code is unrelated to the original
   Python source code.  This is because the Pyrex code is generated from the
   graph only, without reference to the original source.


Where to start reading the sources
==================================

PyPy is made from parts that are relatively independent from each other.
You should start looking at the part that attracts you most:

*  `dist-pypy/pypy/interpreter`_ contains the basic interpreter: bytecode dispatcher
   in pyopcode.py_, frame and code objects in eval.py_ and pyframe.py_,
   function objects and argument passing in function.py_ and argument.py_,
   the object space interface definition in baseobjspace.py_, modules in
   module.py_ and extmodule.py_.  Core types supporting the interpreter are
   defined in typedef.py_.

*  `dist-pypy/pypy/objspace/std`_ contains the `Standard object space`_.  The main file
   is objspace.py_.  For each type, the files ``xxxtype.py`` and
   ``xxxobject.py`` contain respectively the definition of the type and its
   (default) implementation.

*  `dist-pypy/pypy/objspace`_ contains a few other object spaces: the thunk_
   one, the trace_ one, the flow_ one.  The latter is a relatively short piece
   of  code that builds the control flow graphs when the interpreter runs in it.

*  `dist-pypy/pypy/translator`_ contains the code analysis and generation stuff.
   Start reading from translator.py_, from which it should be easy to follow
   the pieces of code involved in the various translation phases.

*  `dist-pypy/pypy/annotation`_ contains the data model for the type annotation that
   can be inferred about a graph.  The graph "walker" that uses this is in
   `dist-pypy/pypy/translator/annrpython.py`_.


To learn more
=============

*  To learn more about PyPy and its development process, head
   read around in the documentation_ and the wiki_, and consider 
   subscribing to the `mailing lists`_ (or simply
   read the archives online) or show up irc.freenode.net:6667, channel #pypy.

*  To help PyPy become Python-the-next-generation, you may write some 
   `unit tests`_ and file some `bug reports`_ (although we are not really 
   actively using the issue tracker yet, watch out :-) 

--------------------------------------------------------------------------------

.. _subversion:             http://codespeak.net/pypy/index.cgi?doc/howtosvn.html
.. _Dot Graphviz:           http://www.research.att.com/sw/tools/graphviz/
.. _Pygame:                 http://www.pygame.org/
.. _dist-pypy/pypy/interpreter:   http://codespeak.net/svn/pypy/dist/pypy/interpreter/
.. _pyopcode.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/pyopcode.py
.. _eval.py:                http://codespeak.net/svn/pypy/dist/pypy/interpreter/eval.py
.. _pyframe.py:             http://codespeak.net/svn/pypy/dist/pypy/interpreter/pyframe.py
.. _function.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/function.py
.. _argument.py:            http://codespeak.net/svn/pypy/dist/pypy/interpreter/argument.py
.. _baseobjspace.py:        http://codespeak.net/svn/pypy/dist/pypy/interpreter/baseobjspace.py
.. _module.py:              http://codespeak.net/svn/pypy/dist/pypy/interpreter/module.py
.. _extmodule.py:           http://codespeak.net/svn/pypy/dist/pypy/interpreter/extmodule.py
.. _typedef.py:             http://codespeak.net/svn/pypy/dist/pypy/interpreter/typedef.py
.. _dist-pypy/pypy/objspace/std:  http://codespeak.net/svn/pypy/dist/pypy/objspace/std/
.. _Standard object space:  http://codespeak.net/pypy/index.cgi?doc/stdobjspace.html
.. _objspace.py:            http://codespeak.net/svn/pypy/dist/pypy/objspace/std/objspace.py
.. _dist-pypy/pypy/objspace:      http://codespeak.net/svn/pypy/dist/pypy/objspace/
.. _thunk:                  http://codespeak.net/svn/pypy/dist/pypy/objspace/thunk.py
.. _trace:                  http://codespeak.net/svn/pypy/dist/pypy/objspace/trace.py
.. _flow:                   http://codespeak.net/svn/pypy/dist/pypy/objspace/flow/
.. _dist-pypy/pypy/translator:    http://codespeak.net/svn/pypy/dist/pypy/translator/
.. _translator.py:          http://codespeak.net/svn/pypy/dist/pypy/translator/translator.py
.. _dist-pypy/pypy/annotation:    http://codespeak.net/svn/pypy/dist/pypy/annotation/
.. _dist-pypy/pypy/translator/annrpython.py: http://codespeak.net/svn/pypy/dist/pypy/translator/annrpython.py
.. _mailing lists:          http://codespeak.net/pypy/index.cgi?lists
.. _documentation:          http://codespeak.net/pypy/index.cgi?doc
.. _wiki:                   http://codespeak.net/moin/pypy/moin.cgi/FrontPage?action=show
.. _unit tests:             http://codespeak.net/pypy/index.cgi?doc/testdesign.html
.. _bug reports:            http://codespeak.net/issues/pypy/
