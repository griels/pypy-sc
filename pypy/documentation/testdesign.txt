=============
Test Design
=============

Our tests are based on the new `py.test`_ tool which lets you write
unittests without boilerplate.  All tests of modules
in a directory usually reside in a subdirectory **test**.  There are
basically two types of unit tests:

- **Interpreter Level tests**. They run at the same level as PyPy's
  interpreter.

- **Application Level tests**. They run at application level which means
  that they look like straight python code but they are interpreted by PyPy.

Both types of tests need an objectspace they can run with (the interpreter
dispatches operations on objects to an objectspace).  If you run a test you
can usually give the '-o' switch to select an object space.  E.g. '-o trivial' 
will select the trivial object space. The default is the "Standard Object Space". 

.. _`py.test`: http://codespeak.net/py/current/doc/test.html 

Writing a test
--------------

Currently the best reference is to go to some test files and look how they are done.

Command line tool test_all
--------------------------

You can run almost all of PyPy's tests by invoking::

  python test_all.py

which will run all tests against the Standard Object Space. If you want
to test against the TrivialObjectSpace then issue::

  python test_all.py -o trivial 

For more switches invoke "python test_all.py -h".

This used to be reversed -- the TrivialObjectSpace was the default, and
you had to specify the StandardObjectSpace.  You may find some documentation
that has not been changed to reflect the new reality.
