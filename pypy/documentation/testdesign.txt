=============
Test Design
=============

Our tests are based on the new `py.test`_ tool which lets you write
unittests without boilerplate.  All tests of modules
in a directory usually reside in a subdirectory **test**.  There are
basically two types of unit tests:

- **Interpreter Level tests**. They run at the same level as PyPy's
  interpreter.

- **Application Level tests**. They run at application level which means
  that they look like straight python code but they are interpreted by PyPy.

Both types of tests need an objectspace they can run with (the interpreter
dispatches operations on objects to an objectspace).  If you run a test you
can usually give the '-o' switch to select an object space.  E.g. '-o thunk' 
will select the thunk object space. The default is the "Standard Object Space" 
which aims to implement unmodified Python semantics. 

.. _`py.test`: http://codespeak.net/py/current/doc/test.html 

Writing a test
--------------

Currently the best reference is to go to some test files and look how they are done.

Command line tool test_all
--------------------------

You can run almost all of PyPy's tests by invoking::

  python test_all.py

For switches to modify test execution invoke "python test_all.py -h".
