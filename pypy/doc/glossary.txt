**annotator** - Performs a form of `type inference`_ on the flow graph.

**application level** - applevel_ code is normal Python code running on
top of the PyPy or CPython interpreter (See interpreter level)

.. _backend:

**backend** - Code generator that convert a RPython_ program to a
`target language`_ using the PyPy toolchain_. A backend uses either the
lltypesystem_ or the ootypesystem_.

**external function** - Functions that we don't want to implement in Python
for various reasons (e.g. if they need to make calls into the OS) and will
be implemented by the backend.

**garbage collection framework** - Code that makes it possible to write
`PyPy's garbage collectors`_ in Python itself.

.. _`interpreter level`:

**interpreter level** - Code running at this level is part of the
implementation of the PyPy interpreter and cannot interact normally with
application level code; it typically provides implementation for an object
space and its builtins. (See application level)

**jit** - `just in time compiler`_

**l3interpreter** - Piece of code that is able to interpret L3 flow graphs.
This code is unfinished and its future is unclear.

**llinterpreter** - Piece of code that is able to interpret flow graphs.
This is very useful for testing purposes, especially if you work on the
RPython_ Typer.

.. _lltypesystem:

**lltypesystem** - A backend_ that uses this typessystem is also called a
low-level backend.  The C and LLVM backends are using this typesystem.

**mixed module** - a module that accesses PyPy's `interpreter level`_

**object space** - The `object space`_ creates all objects and knows how to
perform operations on the objects. You may think of an object space as being
a library offering a fixed API, a set of operations, with implementations
that a) correspond to the known semantics of Python objects, b) extend or
twist these semantics, or c) serve whole-program analysis purposes.

.. _ootypesystem:

**ootypesystem** - A backend_ that uses this typessystem is also called a
high-level backend.  The common lisp, javascript and cli backends are all
using this typesystem.

**prebuilt constant** - In RPython_ module globals are considered constants.
Moreover, global (i.e. prebuilt) lists and dictionaries are supposed to be
immutable.  (prebuilts are sometimes called pbc's)

**rpython** - `Restricted Python`_, which is the limited subset of the
Python_ specification. It is also the language that the PyPy interpreter
itself is written in.

**rtyper** - Based on the type annotations, the `RPython Typer`_ turns the
flow graph into one that fits the model of the target platform/backend_ using
either the lltypesystem_ or the ootypesystem_.

**specialization** - XXX

**stackless** - Technology that enables various forms of coroutining.

**standard interpreter** - It is the
`subsystem implementing the Python language`_, composed of the bytecode
interpreter and of the standard objectspace.

.. _toolchain:

**toolchain** - The `annotator pass`_, `The RPython Typer`_, and various
`backends`_.

**transformation** - Code that modifies flowgraphs to weave in
`translation-aspects`_

**translator** - Tool_ based on the PyPy interpreter which can translate
sufficiently static Python programs into low-level code.

.. _`type inference`:

**type inference** - Deduces either partially or fully the type of
expressions as described in this `type inference article`_.


.. _applevel: coding-guide.html#application-level
.. _`target language`: getting-started.html#trying-out-the-translator
.. _`just in time compiler`: http://en.wikipedia.org/wiki/Just-in-time_compilation
.. _`type inference article`: http://en.wikipedia.org/wiki/Type_inference
.. _`annotator pass`: translation.html#the-annotation-pass
.. _`The RPython Typer`: translation.html#the-rpython-typer
.. _`backends`: getting-started.html#trying-out-the-translator
.. _Tool: getting-started.html#trying-out-the-translator
.. _`translation-aspects`: translation-aspects.html
.. _`PyPy's garbage collectors`: garbage_collection.html
.. _`Restricted Python`: coding-guide.html#restricted-python
.. _RPython: coding-guide.html#restricted-python
.. _Python: http://www.python.org
.. _`object space`: objspace.html
.. _`RPython Typer`: rtyper.html
.. _`subsystem implementing the Python language`: architecture.html#standard-interpreter

.. include:: _ref.txt
