=======================
The ``__pypy__`` module
=======================

The ``__pypy__`` module is the main entry point to special features provided
by PyPy's standard interpreter. Its content depends on `configuration options`_ 
which may add new functionality and functions whose existence or non-existence 
indicates the presence of such features. 

.. _`configuration options`: config/index.html

Generally available functionality
=================================

 - ``internal_repr(obj)``: return the interpreter-level representation of an
   object.

Thunk Object Space Functionality
================================

When the thunk object space is used (choose with :config:`objspace.name`),
the following functions are put into ``__pypy__``:

 - ``thunk(f, *args, **kwargs)``: returns something that behaves like the result
   of the call ``f(*args, **kwargs)`` but the call is done lazily.

 - ``is_thunk(obj)``: return True if ``obj`` is a thunk that is not computed
   yet.

 - ``become(obj1, obj2)``: globally replace ``obj1`` with ``obj2``.

 - ``lazy(callable)``: Should be used as a function decorator. The decorated
   function behaves lazily: all calls to it return a thunk object.

For explanations and examples see the `thunk object space docs`_.

.. _`thunk object space docs`: objspace-proxies.html#thunk

Tain Object Space Functionality
===============================

When the taint object space is used (choose with :config:`objspace.name`),
the following objects are put into ``__pypy__``:

 - ``taint(obj)``: Return a tainted version of the argument.

 - ``is_tainted(obj)``: Return whether the argument is tainted.

 - ``untaint(expectedtype, tainted_obj)``: Untaint untainted_obj and return it.
   If the result is not of expectedtype, raise a type error.

 - ``taint_atomic(callable)``: decorator to make a callable "taint-atomic": if
   the function is called with tainted arguments, those are untainted. The
   result of the function is tainted again.  All exceptions that the callable
   raises are turned into taint bombs.

 - ``_taint_debug(debug_level)``: Set the debug level. If the debug level is
   greater than 0, the creation of taint bombs will print debug information. For
   debugging purposes only!

 - ``_taint_look(obj)``: Print some info about the taintedness of an object. For
   debugging purposes only!

 - ``TaintError``: Exception that is raised when an operation revealing
   information on a tainted object is performed.

For explanations and examples see the `taint object space docs`_.

.. _`taint object space docs`: objspace-proxies.html#taint

Transparent Proxy Functionality
===============================

If `transparent proxies`_ are enabled (with :config:`objspace.std.withtproxy`)
the following functions are put into ``__pypy__``:

 - ``tproxy(typ, controller)``: Return something that looks like it is of type
   typ. Its behaviour is completely controlled by the controller. See the docs
   about `transparent proxies`_ for detail.

 - ``get_tproxy_controller(obj)``: If obj is really a transparent proxy, return
   its controller. Otherwise return None.

.. _`transparent proxies`: objspace-proxies.html#tproxy


Functionality available on py.py (not after translation)
========================================================

 - ``isfake(obj)``: returns True if ``obj`` is faked.

 - ``interp_pdb()``: start a pdb at interpreter-level.



