============================================
PyPy Extension Compiler 
============================================

This document describes the PyPy extension compiler 
which is able to compile a single set of source code 
to a PyPy or a CPython extension module.  

**WARNING: this is beta software, APIs and details may change.**


Understanding the ext compiler 
----------------------------------

- using rctypes for binding to external libraries 
- exchangeability of CPyObjspace and StdObjSpace 
  * translation to CPython 
  * translation to PyPy 

Using the ext compiler  
----------------------------------------------------

XXXXXXXXXXXXXXXX THIS IS DOCUMENTATION WITHOUT CODE XXXXXXXXXXXXXXXXXXXXXX

writing a module (provide example)
+++++++++++++++++++++++++++++++++++++++++

You have to put your module into its own directory in `pypy/module/`_ 
of your local `pypy checkout`_. 

see `pypy/module/readline`_ for an example. 

XXX describe directory structure here 

testing a module 
++++++++++++++++++++++++

testing only the (ctypes) bindings::

    python2.4 pypy/test_all.py pypy/module/readline/test/test_c_readline.py 

testing the (wrapped) package::
    python2.4 pypy/test_all.py pypy/module/readline/test/test_readline.py 

or::
    py.test pypy/module/readline/test/test_readline.py 

# XXX 

`pypy/module/readline/test/test_readline.py`_. 


translating a module to a CPython extension
++++++++++++++++++++++++++++++++++++++++++++++++++++

:: 
    python2.4 pypy/bin/extcompiler.py readline  #<needs to be in module dir

The extension compiler imports the specified module/package 
and produces a shared library importable from your local 
python2.4 installation.  The produced shared library is 
put into the current working directory by default. 

XXX think about shared state of imported modules (e.g. linecache
    or other modules which might get imported from the ext-package) 

XXX what actually happens to applevel code in an extension module? 

somewhere-in-PYTHONPATH:
    supportpackage/somecode.py 


XXX integration as a PyPy module 




Installation notes requirements 
--------------------------------------------------

XXX more verbose, links
you need to have a full PyPy checkout, refer to getting started

required ctypes version
++++++++++++++++++++++++++++

As of this time, only `ctypes-0.9.9.6`_ is known to work. 

.. _`ctypes-0.9.9.6`: http://sourceforge.net/project/showfiles.php?group_id=71702&package_id=71318&release_id=411554 

platform notes 
++++++++++++++++++


Mac OSX 
++++++++++++++++++++++++++

*ctypes 0.9.9.6 on OSX 10.3*: you need to change the ``RTLD_LOCAL`` default 
in  ctypes/__init__.py line 293 to::

    def __init__(self, name, mode=RTLD_GLOBAL, handle=None):

otherwise it will complain with "unable to open this file with RTLD_LOCAL"
when trying to load the C library. 

