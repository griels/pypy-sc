
========================================
PyPy's ctypes implementation document
========================================

* application level code - code written in full python

* interpreter level code - code written in RPython, compiled
  to something else, say C, part of the interpreter.

PyPy's ctypes implementation is right now mostly a proof of concept,
based on the idea of quick prototyping. The main idea was to use libffi
(same as CPython's ctypes implementation), but try to keep as much
code as possible in Python, not RPython. In CPython's situation,
the equivalent would be to write as little as possible code in C.

Low-level part (called \_rawffi)
================================

We implemented direct bindings to libffi in RPython, allowing to create simple
types (arrays, structures), living in C world, managed by hand. It also
supports calling C functions.
This part contains no special code to keep objects alive and is kept very minimal.
We tried to keep this as small as possible to allow porting our ctypes
implementation to other platforms easily. It's also thinkable that Jython uses
our ctypes implementation by writing their version of _rawffi.

High-level part (lib/\_ctypes)
===============================

This part implements the same interface as the \_ctypes module in CPython,
but it's written in full python. This approach allowed us to experiment
quickly and provide a working implementation in 2 months of real time.

Reuse of the highest level (lib/ctypes)
========================================

We just reused the part which is application level in CPython as well.

Ctypes-platform
===============

We released `ctypes-configure`_, which is a package trying to overcome
portability of ctypes-based code.

.. _`ctypes-configure`: http://codespeak.net/~fijal/configure.html

Limitations
===========

* No support for PyXxx functions from libpython, for obvious reasons.

* Subclassing works differently (ie it follows python subclassing scheme
  instead of ctypes subclassing scheme, which does not do
  inheritance)

* It's not supposed to work on other platform than linux

* We copy strings instead of having pointers to raw buffers, which
  changes keepalive logic a bit

* Custom alignment is not supported

* Callbacks with structures and arrays by-value are unsupported

Minor unsupported features:
===========================

* \_check\_retval\_ is not supported

* \_abstract\_ is not supported

* reprs are different

Speed
=====

Our ctypes implementation was created without putting to much effort into
making it fast. First of all most of it is written as pure-python code which
makes it slow. Obvious optimization would be to reimplement certain parts
of it at interp-level. Other, also very important, issue is that pypy's I/O
operations are generally slow. This is mostly due to model in which
unmanaged memory (outside of gc scope) must be the only one that goes to C
level. This is a huge simplifaction which allowed us to not worry about
that when developing moving gcs. At some point we will improve C-level
operations by either introducing pinning or by some other, yet undecided
means.

Running example code
====================

You need a translation with ``--withmod-_rawffi`` in order to run any
ctypes code. For most examples ``--allworkingmodules`` translation option
also makes sense. Known applications to run are `pysqlite-ctypes`_ and
`pyglet`_. As of March 2008, from pysqlite all tests passes except one
that relies on __del__ being called immediately. From pyglet, the following
examples work:
  
  - opengl.py
  - multiple_windows.py
  - events.py
  - window_platform_event.py
  - fixed_resolution.py
  - html_label.py
  - media_player.py
  - timer.py

The following don't work:

  - fixed_resolution.py needs PIL
  - image_convert.py needs PIL
  - image_display.py needs PIL
  - astraea/astraea.py needs PIL
  - video.py (but didn't work for me on CPython either)
  - soundscape needs avbin

The `stress tests`_ of Johnathan Hartley is also working.

.. _`pysqlite-ctypes`: XXX link
.. _`pyglet`: http://pyglet.org/
.. _`stress tests`: http://tartley.com/?p=264
