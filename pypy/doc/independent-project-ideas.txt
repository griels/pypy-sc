Independent project ideas in PyPy
=================================

PyPy allows experimentation in a lot of directions.  This page is meant to
collect some ideas of things to try.  If you are a student you can 
also get inspired for a proposal for our new `Summer of PyPy`_ campaign:
you get a mentor and good funding of travels and accomodation for our
sprints.  

Feel free to suggest new ideas and discuss them on IRC or the pypy-dev
list. 

In no particular order:

* Rewrite one or several CPython extension modules to be based on **ctypes**
  (newly integrated in Python 2.5): this is generally useful for Python
  developers, and it is now the best path to write extension modules that are
  compatible with both CPython and PyPy.  See for example
  http://wiki.python.org/moin/CodingProjectIdeas/PygameOnCtypes .  
  (This is not documented so far; for an example on which we are working now,
  look at the socket module at
  http://codespeak.net/svn/pypy/dist/pypy/module/_socket/).

* A related idea is to provide efficient numeric arrays (as in
  numeric/numpy/numarray) in this way, or `recreate them as builtins`_.

* Start a back-end for a new target platform, e.g. for the **Java** virtual
  machine.  This would be a path to bring PyPy and Jython closer and help
  support Jython's effort to keep up-to-date, in particular with extension
  modules.  Other back-ends that we are already working on are for Squeak,
  Microsoft's CLI, and Common Lisp; look for ``squeak``, ``cli`` and ``cl``
  in http://codespeak.net/svn/pypy/dist/pypy/translator.

* A research project: experiment with optimizations in PyPy, e.g. by trying
  various **data structures** for dicts or other built-in objects, by switching
  between data structures at run-time, comparing results for different
  applications, etc.  This should produce experimental results (mostly
  timings, memory usage trade-offs) as much as code.

* Revive **rexec** : implement security checks, sandboxing, or
  some similar model within PyPy (which, if I may venture an opinion, makes
  more sense and is more robust than trying to do it in CPython).

* Write **new object spaces** adding features like transparent or
  semi-transparent distribution of a program across several machines, and/or
  persistence (pickling of program state).
  Read more about `object spaces`_...

* Write an interpreter for **another dynamic language** in the PyPy framework.
  For example, a Javascript interpreter would be suitable.  Ruby too (though
  the latter is probably more than two months of work).  Or Scheme, or... etc.

* a P2P model of distributed execution (extending `py.execnet`_) 
  that allows `py.test`_ and other upcoming utilities to make use of a 
  network of computers executing python tasks (e.g. tests or PyPy build tasks). 

* a client tool and according libraries to instantiate a dynamic network 
  of computers executing centrally managed tasks (e.g. build or test ones). 
  (this may make use of a P2P model or not, both is likely feasible). 

* improving `py.test`_ to contain benchmarking and/or better
  reporting (e.g. cool html or PDF reports). 

* Constraint programming: `efficient propagators for specialized
  finite domains`_ (like numbers, sets, intervals).

* A `code templating solution`_ for Python code, allowing to extend
  the language syntax, control flow operators, etc.

...or whatever else interests you!

Note: currently it is a bit difficult for us to identify nice independent
sub-tasks in the context of the JIT compiler of PyPy...

Feel free to mention your interest and discuss these ideas on the `pypy-dev
mailing list`_.  You can also have a look around our documentation_.


.. _`efficient propagators for specialized finite domains`: http://codespeak.net/svn/pypy/extradoc/soc-2006/constraints.txt
.. _`recreate them as builtins`: http://codespeak.net/svn/pypy/extradoc/soc-2006/numeric-arrays.txt
.. _`code templating solution`: http://codespeak.net/svn/pypy/extradoc/soc-2006/code-templating.txt
.. _`pypy-dev mailing list`: http://codespeak.net/mailman/listinfo/pypy-dev
.. _`object spaces`: objspace.html
.. _`py lib`: http://codespeak.net/py/
.. _`py.test`: http://codespeak.net/py/current/doc/test.html
.. _`py.execnet`: http://codespeak.net/py/current/doc/execnet.html

.. _documentation: index.html
