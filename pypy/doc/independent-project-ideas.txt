Independent project ideas in PyPy
=================================

PyPy allows experimentation in a lot of directions.  This page is meant to
collect some ideas of things to try.  We have built it with Google's Summer of
Code in mind, which means that we try to describe ideas and projects that
should fit in two months of work including getting started with PyPy.
(This might not actually be true, if you want to finish it all; two months
should get some major sub-goals done.)

::

   Note about the Summer of Code: Your proposals need to somehow
   give the impression that they are yours, and that your are interested in
   them and have some idea about what is involved.  Feel free to discuss
   ideas on pypy-dev, and submit proposals early -- you'll get early feedback
   from us too, and you can update your proposal any number of times until the
   deadline.  Basically, just copy-and-pasting one of the paragraphs from
   here is *not* enough for a proposal!

In no particular order:

* Rewrite one or several CPython extension modules to be based on **ctypes**
  (newly integrated in Python 2.5): this is generally useful for Python
  developpers, and it is now the best path to write extension modules that are
  compatible with both CPython and PyPy.  See for example
  http://wiki.python.org/moin/CodingProjectIdeas/PygameOnCtypes .  
  (This is not documented so far; for an example on which we are working now,
  look at the socket module at
  http://codespeak.net/svn/pypy/dist/pypy/module/_socket/).

* A related idea is to provide efficient numeric arrays (as in
  numeric/numpy/numarray) in this way, or `recreate them as builtins`_.

* Start a back-end for a new target platform, e.g. for the **Java** virtual
  machine.  This would be a path to bring PyPy and Jython closer and help
  support Jython's effort to keep up-to-date, in particular with extension
  modules.  Other back-ends that we are already working on are for Squeak,
  Microsoft's CLI, and Common Lisp; look for ``squeak``, ``cli`` and ``cl``
  in http://codespeak.net/svn/pypy/dist/pypy/translator.

* A research project: experiment with optimizations in PyPy, e.g. by trying
  various **data structures** for dicts or other built-in objects, by switching
  between data structures at run-time, comparing results for different
  applications, etc.  This should produce experimental results (mostly
  timings, memory usage trade-offs) as much as code.

* Revive **rexec** : implement security checks, sandboxing, or
  some similar model within PyPy (which, if I may venture an opinion, makes
  more sense and is more robust than trying to do it in CPython).

* Write **new object spaces** adding features like transparent or
  semi-transparent distribution of a program across several machines, and/or
  persistence (pickling of program state).
  Read more about `object spaces`_...

* Write an interpreter for **another dynamic language** in the PyPy framework.
  For example, a Javascript interpreter would be suitable.  Ruby too (though
  the latter is probably more than two months of work).  Or Scheme, or... etc.

* A different kind of project: work on **py.test** to add features like
  distributed testing, automatic reports, etc.  The py.test tool is part of
  the `py lib`_, on which many PyPy developers work.

* Constraint programming: `efficient propagators for specialized
  finite domains`_ (like numbers, sets, intervals).

* A `code templating solution`_ for Python code, allowing to extend
  the language syntax, control flow operators, etc.

...or whatever else interests you!

Note: currently it is a bit difficult for us to identify nice independent
sub-tasks in the context of the JIT compiler of PyPy...

Feel free to mention your interest and discuss these ideas on the `pypy-dev
mailing list`_.  You can also have a look around our documentation_.


.. _`efficient propagators for specialized finite domains`: http://codespeak.net/svn/pypy/extradoc/soc-2006/constraints.txt
.. _`recreate them as builtins`: http://codespeak.net/svn/pypy/extradoc/soc-2006/numeric-arrays.txt
.. _`code templating solution`: http://codespeak.net/svn/pypy/extradoc/soc-2006/code-templating.txt
.. _`pypy-dev mailing list`: http://codespeak.net/mailman/listinfo/pypy-dev
.. _`object spaces`: objspace.html
.. _`py lib`: http://codespeak.net/py/
.. _documentation: index.html
