==========================
   Refactoring SomePBCs
==========================

Motivation
==========

Some parts of the annotator, and especially specialization, are quite obscure
and hackish.  One cause for this is the need to manipulate Python objects like
functions directly.  This makes it hard to attach additional information directly
to the objects.  It makes specialization messy because it has to create new dummy
function objects just to represent the various specialized versions of the function.


Plan
====

Let's introduce nice wrapper objects.  This refactoring is oriented towards
the following goal: replacing the content of SomePBC() with a plain set of
"description" wrapper objects.  We shall probably also remove the possibility
for None to explicitly be in the set and add a can_be_None flag (this is
closer to what the other SomeXxx classes do).


XxxDesc classes
===============

To be declared in module pypy.annotator.desc, with a mapping
annotator.bookkeeper.descs = {<python object>: <XxxDesc instance>}
accessed with bookkeepeer.getdesc(<python object>).

Maybe later the module should be moved out of pypy.annotation but for now I
suppose that it's the best place.

The goal is to have a single Desc wrapper even for functions and classes that
are specialized.

FunctionDesc

    Describes (usually) a Python function object.  Contains flow graphs: one
    in the common case, zero for external functions, more than one if there
    are several specialized versions.  Also describes the signature of the
    function in a nice format (i.e. not by relying on func_code inspection).

ClassDesc

    Describes a Python class object.  Generally just maps to a ClassDef, but
    could map to more than one in the presence of specialization.  So we get
    SomePBC({<ClassDesc>}) annotations for the class, and when it's
    instantiated it becomes SomeInstance(classdef=...) for the particular
    selected classdef.

MethodDesc

    Describes a bound method.  Just references a FunctionDesc and a ClassDef
    (not a ClassDesc, because it's read out of a SomeInstance).

FrozenDesc

    Describes a frozen pre-built instance.  That's also a good place to store
    some information currently in dictionaries of the bookkeeper.

MethodOfFrozenDesc

    Describes a method of a FrozenDesc.  Just references a FunctionDesc and a
    FrozenDesc.

NB: unbound method objects are the same as function for our purposes, so they
become the same FunctionDesc as their im_func.

These XxxDesc classes should share some common interface, as we'll see during
the refactoring.  A common base class might be a good idea (at least I don't
see why it would be a bad idea :-)


Implementation plan
===================

* make a branch (/branch/somepbc-refactoring/)

* change the definition of SomePBC, start pypy.annotation.desc

* fix all places that use SomePBC :-)

* turn Translator.flowgraphs into a plain list of flow graphs,
  and make the FunctionDescs responsible for computing their own flow graphs

* move external function functionality into the FunctionDescs too
