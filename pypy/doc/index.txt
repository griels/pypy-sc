=================================================
PyPy - a Python_ implementation written in Python 
=================================================

.. _Python: http://www.python.org/dev/doc/maint24/ref/ref.html

architecture_ gives a complete view of PyPy's basic design. 

`getting started`_ provides hands-on instructions 
including a two-liner to run PyPy on your system. 

`coding guide`_ helps you to write code for PyPy. 

`development methodology`_ describe our sprint-driven approach. 

`object spaces`_ discusses the object space interface 
and several implementations. 

`bytecode interpreter`_ explains the basic mechanisms 
of the bytecode interpreter and virtual machine. 

`translation`_ offers the beginnings of documentation 
about our low level code generator backends. 

`EU reports`_ is a page that contains links to the
preliminary reports that we submitted to the European Union.

`dynamic-language translation`_ is a paper that describes
the translation process, especially the flow object space
and the annotator in detail. This document is also part
of the `EU reports`_.

`low-level encapsulation`_ describes how our approach hides
away a lot of low level details. This document is also part
of the `EU reports`_.

`translation aspects`_ describes how we weave different
properties into our interpreter during the translation
process. This document is also part of the `EU reports`_.

`parser`_ contains the beginnings of documentation about
the parser (and the compiler at some point). 

`garbage collection`_ contains documentation about
garbage collection in PyPy.

`FAQ`_ contains the beginning of frequently asked questions.
Right now it's a bit empty.

`talks and related projects`_ lists presentations 
and related projects. 

`compliance test status`_ shows outcomes of 
recent compliance test runs against PyPy. 

`PyPy statistics`_ shows LOC statistics about PyPy. 

`license`_ contains licensing details (basically a straight MIT-license). 

.. _`FAQ`: faq.html
.. _parser: parser.html
.. _`development methodology`: dev_method.html
.. _`talks and related projects`: extradoc.html
.. _`license`: ../../LICENSE
.. _`compliance test status`: http://codespeak.net/~hpk/pypy-testresult/
.. _`PyPy statistics`: http://codespeak.net/~hpk/pypy-stat/
.. _`object spaces`: objspace.html 
.. _`translation`: translation.html 
.. _`dynamic-language translation`: dynamic-language-translation.html
.. _`low-level encapsulation`: low-level-encapsulation.html
.. _`translation aspects`: translation-aspects.html
.. _`coding guide`: coding-guide.html 
.. _`architecture`: architecture.html 
.. _`revision report`: http://codespeak.net/pypy/rev/current 
.. _`getting started`: getting-started.html 
.. _`theory`: theory.html
.. _`bytecode interpreter`: interpreter.html 
.. _`EU reports`: index-report.html
.. _`garbage collection`: garbage_collection.html
.. _`directory reference`: 

PyPy directory cross-reference 
======================================================

Here is a fully referenced alphabetical two-level deep 
directory overview of PyPy: 

============================   =========================================== 
Directory                      explanation/links
============================   =========================================== 
`annotation/`_                 `type inferencing code`_ for `RPython`_ programs 

`doc/`_                        text versions of PyPy developer documentation

`doc/revreport/`_              the source code for the `revision report`_ 

`interpreter/`_                `bytecode interpreter`_ and related objects (frames, functions, modules,...) 

`interpreter/astcompiler/`_    interpreter-level bytecode compiler, via an AST
                               representation

`lib/`_                        PyPy's wholesale reimplementations of CPython modules_

`lib/test2/`_                  tests running at interp-level against the reimplementations 

`module/`_                     contains `mixed modules`_ implementing core modules with 
                               both application and interpreter level code 

`module/_sre/`_                full regular expression implementation 

`module/__builtin__/`_         full implementation of CPython's ``__builtin__`` module. 

`module/recparser/`_           parser_ package from Logilab 

`module/sys/`_                 implementation of CPython's ``sys`` module.  

`objspace/`_                   `object space`_ implementations

`objspace/trace.py`_           the `trace object space`_ monitoring bytecode and space operations

`objspace/thunk.py`_           the `thunk object space`_, providing unique object features 

`objspace/flow/`_              the FlowObjSpace_ implementing `abstract interpretation`

`objspace/std/`_               the StdObjSpace_ implementing CPython's objects and types

`rpython/`_                    the `RPython Typer`_ 

`rpython/memory/`_             experimental `garbage collector`_ construction
                               framework

`tool/`_                       various utilities and hacks used from various places 

`tool/algo/`_                  general-purpose algorithmic and mathematic
                               tools

`tool/pytest/`_                support code for our `testing methods`_

`tool/tb_server/`_             a somewhat outdated http-server for presenting 
                               tracebacks in a helpful manner 

`translator/`_                 translation_ backends and support code

`translator/c/`_               the `GenC backend`_, producing C code from an
                               RPython program (generally via the RTyper)

`translator/llvm/`_            contains the `LLVM backend`_ producing LLVM assembler 
                               from fully annotated RPython programs 

`translator/tool/`_            helper tools for translation 

`translator/goal/`_            currently our main PyPy-translation scripts
                               live here

``*/test/``                    many directories have a test subdirectory containing test 
                               modules (see `Testing in PyPy`_) 

``_cache/``                    holds cache files from internally `translating application 
                               level to interpreterlevel`_ code.   
============================   =========================================== 

.. _`bytecode interpreter`: interpreter.html
.. _`translating application level to interpreterlevel`: translation.html#python-back-end 
.. _documentation: index.html
.. _`Testing in PyPy`: coding-guide.html#testing-in-pypy 
.. _`mixed modules`: coding-guide.html#mixed-modules 
.. _`modules`: coding-guide.html#modules 
.. _`basil`: http://people.cs.uchicago.edu/~jriehl/BasilTalk.pdf
.. _`object space`: objspace.html
.. _FlowObjSpace: objspace.html#the-flow-object-space 
.. _`trace object space`: objspace.html#the-trace-object-space 
.. _`thunk object space`: objspace.html#the-thunk-object-space 
.. _StdObjSpace: objspace.html#the-standard-object-space 
.. _`abstract interpretation`: theory.html#abstract-interpretation
.. _`rpython`: coding-guide.html#rpython 
.. _`type inferencing code`: translation.html#the-annotation-pass 
.. _`RPython Typer`: translation.html#rpython-typer 
.. _`testing methods`: coding-guide.html#testing-in-pypy
.. _`translation`: translation.html 
.. _`GenC backend`: translation.html#genc 
.. _`LLVM backend`: translation.html#llvm 
.. _`revision report`: http://codespeak.net/pypy/rev/current 
.. _`garbage collector`: garbage_collection.html


.. include:: _ref.txt
