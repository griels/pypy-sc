====================================
Differences between PyPy and CPython
====================================

This page documents the few differences and incompatibilities between
the PyPy Python interpreter and CPython.  Some of these differences
are "by design", since we think that there are cases in which the
behaviour of CPython is buggy, and we do not want to copy bugs.

Differences that are not listed here should be considered bugs of
PyPy.

Differences related to garbage collection strategies
----------------------------------------------------

XXX: write me please


Subclasses of builtin ``dict`` objects
--------------------------------------

When you pass an instance of a subclass of ``dict`` to the
``dict.update`` method, CPython simply ignores potentially overridden
methods, such as ``keys()`` or ``__getitem__()``; on the other hand,
PyPy correctly calls the overridden versions of the methods.

For example, the following code prints ``42`` on PyPy but ``foo``
on CPython::

    >>>> class D(dict):
    ....     def __getitem__(self, key):
    ....         return 42
    ....
    >>>>
    >>>> d1 = {}
    >>>> d2 = D(a='foo')
    >>>> d1.update(d2)
    >>>> print d1['a']
    42

Comparison differencies
-----------------------

When custom \_\_eq\_\_ function on object (or any other rich comparison
method) raises an exception, we don't swallow the exception and instead
report it to user.

