test_pprint 
    fails because  "dict.__repr__ is dict.__repr__" equals False

test_import 
    fails because os.open is case insensitive (at least on Mac os X)

multiple tests fail because from __future__ import division does 
not work (true division is never enabled)

test_iterlen (ale will work on this)

    fails because len is not implemented for SeqIter (and
    other structures like generators (reversed) )

test_compiler 
    fails because of "maximum recursion depth exceeded"

test_decorator
    fails because globals and locals are None in a nested function ?


test_builtin
    - our compilers need to recognize BOM markers
    - eval etc  should accept dict subclasses
    - hex/oct should output '-' for negative numbers
    - FIXED unicode("\u0663", 'raw-unicode-escape') does not work properly
    - disallow interning of string subclasses
    - __future__ import division problems


test_mutants
   still crashes because it does a str() on a a mutating dict
   which results in a RuntimeError, what does CPython output in this case?


test_tuple etc
   do we want to support x is x*1 where x is exactly a tuple?

test_new FIXED

test_extcall
   cannot be fixed.  PyPy produces different TypeError messages but they are
   also correct and useful (reviewed them again).

test_optparse FIXED


test_sort FIXED
   different way of detecting mutations during sort: PyPy didn't detect
   changes done by the __del__ method of the key-wrapper objects.

test_str FIXED
   there's some optimisation tests failing => disabled them

test_tempfile
  still failing

test_exceptions
  mismatch in SyntaxError messages


test_cpickle
test_descr
   FIXED? should be re-run.  Were fixed in modified-2.3.4, but then they
   were somehow lost when we switched to 2.4.1...

test_sys (FIXED)
    refcount test disabled (considered implementation detail from CPython)
